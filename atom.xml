<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>travisgeis.com</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://travisgeis.com/"/>
  <updated>2020-10-06T04:27:52.041Z</updated>
  <id>https://travisgeis.com/</id>
  
  <author>
    <name>Travis Geis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Adding Persistent Settings to Drop CTRL</title>
    <link href="https://travisgeis.com/2020/10/05/adding-persistent-settings-to-drop-ctrl/"/>
    <id>https://travisgeis.com/2020/10/05/adding-persistent-settings-to-drop-ctrl/</id>
    <published>2020-10-06T01:55:19.000Z</published>
    <updated>2020-10-06T04:27:52.041Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="ui message">  For more thoughts on the Drop CTRL in general, check out my full review.</div> --><p>I recently bought a <a href="https://drop.com/buy/drop-ctrl-high-profile-mechanical-keyboard">Drop CTRL keyboard</a> and I’m quite pleased, but after a few days I noticed that every time I unplugged it, it would reset itself to the default LED animation. I did some digging into the firmware, a <a href="https://github.com/Massdrop/qmk_firmware">variant</a> of the popular <a href="https://qmk.fm/">QMK</a>, and discovered that the keyboard’s persistent storage driver is just stubbed out as an array in memory! By default, when the keyboard loses power, it forgets all the settings configured while it was on.</p><p>This article will go through the technical details of what needs to happen to get this keyboard to remember its settings correctly. It turns out that the keyboard fully supports saving its settings through a power loss, and I have ben using it with these changes for the past week.</p><h2 id="Just-tell-me-the-steps"><a href="#Just-tell-me-the-steps" class="headerlink" title="Just tell me the steps!"></a>Just tell me the steps!</h2><p>Before we dive in, in case you just want the steps to make it work, here is how you enable persistent storage on your Drop ALT or CTRL keyboard:</p><h3 id="Clone-and-build-the-modified-mdloader"><a href="#Clone-and-build-the-modified-mdloader" class="headerlink" title="Clone and build the modified mdloader"></a>Clone and build the modified mdloader</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ottobonn/mdloader</span><br><span class="line">cd mdloader</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="Enable-Smart-EEPROM-using-mdloader"><a href="#Enable-Smart-EEPROM-using-mdloader" class="headerlink" title="Enable Smart EEPROM using mdloader"></a>Enable Smart EEPROM using mdloader</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">./mdloader --first --smarteep</span><br></pre></td></tr></table></figure><p>While the mdloader command is waiting for a device, enter flashing mode on your keyboard with Fn + B or the tiny button on the back. After the new firmware uploads, unplug and plug in the keyboard to restart it (it will look dead, but it’s just not restarting).</p><h3 id="Clone-and-build-the-modified-default-keymap"><a href="#Clone-and-build-the-modified-default-keymap" class="headerlink" title="Clone and build the modified default keymap"></a>Clone and build the modified default keymap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ottobonn/qmk_firmware</span><br><span class="line">cd qmk_firmware</span><br><span class="line">make massdrop:ctrl/default_md</span><br></pre></td></tr></table></figure><p>If you have an ALT keyboard, you can adapt this keymap file for it.</p><h3 id="Load-the-new-firmware-on-to-the-keyboard"><a href="#Load-the-new-firmware-on-to-the-keyboard" class="headerlink" title="Load the new firmware on to the keyboard"></a>Load the new firmware on to the keyboard</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mdloader --first --restart --download path/to/qmk_firmware/.build/massdrop_ctrl_default_md.hex</span><br></pre></td></tr></table></figure><p>Your keyboard should restart and should remember its settings from now on!</p><hr><h2 id="How-it-all-works"><a href="#How-it-all-works" class="headerlink" title="How it all works"></a>How it all works</h2><p>With the how-to out of the way, let’s go over how the changes work to support persistent settings on the keyboard.</p><h3 id="Drop-CTRL-architecture"><a href="#Drop-CTRL-architecture" class="headerlink" title="Drop CTRL architecture"></a>Drop CTRL architecture</h3><p>Let’s start with a bit of information on how the Drop CTRL and ALT are constructed. These keyboards use an ARM processor from Micron (developed by Atmel before Micron bought them) called the <a href="https://www.microchip.com/wwwproducts/en/ATSAMD51J18A">ATSAMD51</a>. This processor is popular in the newer Arduino-compatible boards like <a href="https://www.adafruit.com/product/3857">Adafruit’s Feather M4</a>. It’s super overpowered (in a good way!) for a keyboard and more than capable of its task of updating LEDs and scanning for pressed keys.</p><a href="/uploads/2020/10/atsamd51j18a.jpg"><img src="/uploads/2020/10/body-atsamd51j18a.jpg" alt="The actual chip inside my Drop CTRL keyboard."></a><p>The keyboards additionally have a USB 2.0 hub to allow one of the two onboard USB-C connectors to act as an additional port for the host computer. The keyboard processor connects to this hub as one of its downstream clients.</p><p>The keyboards are cool in other ways; check out my full review for all the other details.</p><h3 id="Persistent-storage-in-microcontrollers"><a href="#Persistent-storage-in-microcontrollers" class="headerlink" title="Persistent storage in microcontrollers"></a>Persistent storage in microcontrollers</h3><p>Microcontrollers use random-access memory to keep track of their state while they have power, just like a full-size computer does. When they lose power, they lose the contents of RAM. However, unlike a typical computer, most microcontrollers don’t have much persistent storage, like a hard drive or flash chip. Those things have to be added to the system as additional chips.</p><p>If you’ve programmed Arduino boards, you may already know that common microcontrollers offer a tiny bit of persistent storage in the form of EEPROM, which is like RAM that doesn’t lose its contents on power loss. Most QMK-compatible keyboards seem to be based on the Arduino-staple AVR microcontrollers, and use the AVR EEPROM to store user settings in case the keyboard loses power.</p><p>However, the ATSAMD51 is a much more powerful microcontroller and its designers opted to include on-board flash for nonvolatile memory instead of the more traditional EEPROM. Flash is another form of persistent memory, but it has some quirks; the main one that separates it from EEPROM is that it can only be erased in large blocks at a time, while single bytes of EEPROM are erasable.</p><p>To overcome the limitations of flash for more traditional EEPROM applications, the SAMD51 includes “SmartEEPROM,” a programming API that uses flash to emulate EEPROM.</p><p>See page 594 of <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/SAM_D5xE5x_Family_Data_Sheet_DS60001507F.pdf">the datasheet</a> for the full introduction to SmartEEPROM. Here’s the overview from that page:</p><a href="/uploads/2020/10/smart-eeprom.png"><img src="/uploads/2020/10/body-smart-eeprom.png" alt="The introduction to SmartEEPROM from the ATSAMD51 data sheet."></a><p>Unfortunately, the Drop CTRL and ALT come from the factory with SmartEEPROM disabled. Fortunately, it’s easy to enable!</p><h3 id="Enabling-SmartEEPROM-on-the-microcontroller"><a href="#Enabling-SmartEEPROM-on-the-microcontroller" class="headerlink" title="Enabling SmartEEPROM on the microcontroller"></a>Enabling SmartEEPROM on the microcontroller</h3><p>Microcontrollers are designed to support configuration options that the software running on them can’t change, for example to protect the firmware from deletion. They store this less-voltatile configuration in “fuse bits,” so named because they emulate actual hardware wires being connected or cut during manufacture. For the most part, fuse bits retain their values when the microcontroller is reprogrammed. However, unlike hardware fuses, they are editable after manufacturing.</p><p>To program the fuse bits, we need to modify the application that loads new firmware onto the keyboard. For Drop keyboards, the program is “<a href="https://github.com/Massdrop/mdloader">mdloader</a>.” I didn’t write the changes we’re about to see, so I have to thank and give credit to Alexandre d’Alton for <a href="https://github.com/Massdrop/mdloader/pull/16">implementing it</a>.</p><p>Here’s the code that runs on the host computer to enable the SmartEEPROM fuse bits on the keyboard microcontroller:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write_user_row</span><span class="params">(<span class="keyword">uint32_t</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint16_t</span> status = read_half_word(DSU_STATUSB);</span><br><span class="line">    write_half_word(DSU_STATUSB, status);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* clear nvm interrupt status bits */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> cfg = read_word(NVMCTRL_CTRLA);</span><br><span class="line">    cfg &amp;= ~(<span class="number">0xf0</span>);</span><br><span class="line">    write_word(NVMCTRL_CTRLA, cfg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set user row address */</span></span><br><span class="line">    write_word(NVMCTRL_ADDR, NVMCTRL_USER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* erase page */</span></span><br><span class="line">    write_half_word(NVMCTRL_CTRLB, (NVMCTRL_CTRLB_CMDEX_KEY|NVMCTRL_CTRLB_CMD_EP));</span><br><span class="line"></span><br><span class="line">    slp(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* erase write buffer */</span></span><br><span class="line">    write_half_word(NVMCTRL_CTRLB, (NVMCTRL_CTRLB_CMDEX_KEY|NVMCTRL_CTRLB_CMD_PBC));</span><br><span class="line"></span><br><span class="line">    slp(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* write in the write buffer */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        write_word(NVMCTRL_USER + i * <span class="number">4</span>,  data[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set user row address */</span></span><br><span class="line">    write_word(NVMCTRL_ADDR, NVMCTRL_USER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* program quad word (128bits) */</span></span><br><span class="line">    write_half_word(NVMCTRL_CTRLB, (NVMCTRL_CTRLB_CMDEX_KEY|NVMCTRL_CTRLB_CMD_WQW));</span><br><span class="line"></span><br><span class="line">    slp(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that we have SmartEEPROM enabled, we can implement an EEPROM driver for it!</p><h3 id="Adding-support-for-SmartEEPROM-to-QMK"><a href="#Adding-support-for-SmartEEPROM-to-QMK" class="headerlink" title="Adding support for SmartEEPROM to QMK"></a>Adding support for SmartEEPROM to QMK</h3><p>QMK supports several different microcontrollers for keyboards, and each supported controller needs its own definitions for things like pin functions, timing, and EEPROM.</p><p>Let’s start by looking at the existing EEPROM code for the Drop keyboards:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eeprom.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EEPROM_SIZE 32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> buffer[EEPROM_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">eeprom_read_byte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uintptr_t</span> offset = (<span class="keyword">uintptr_t</span>)addr;</span><br><span class="line">    <span class="keyword">return</span> buffer[offset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write_byte</span><span class="params">(<span class="keyword">uint8_t</span> *addr, <span class="keyword">uint8_t</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uintptr_t</span> offset = (<span class="keyword">uintptr_t</span>)addr;</span><br><span class="line">    buffer[offset]   = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code uses an in-memory array to pretend to implement EEPROM support, so it’s not suprising that the settings get lost on power down!</p><p>Thankfully, the ATSAMD51 datasheet includes an example snippet for writing to SmartEEPROM:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare a pointer to the SmartEEPROM start address</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">uint8_t</span> *SmartEEPROM8 = (<span class="keyword">uint8_t</span> *) SEEPROM_ADDR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for the NVM to be ready</span></span><br><span class="line"><span class="keyword">while</span> (NVMCTRL-&gt;SEESTAT.bit.BUSY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// now write to SEEPROM_ADDR like a normal array, e.g.:</span></span><br><span class="line">SEEPROM_ADDR[<span class="number">0</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>Let’s build on that to implement our actual EEPROM driver:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((aligned(<span class="number">4</span>))) <span class="keyword">static</span> <span class="keyword">uint8_t</span> buffer[EEPROM_SIZE];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">uint8_t</span> *smart_eeprom = (<span class="keyword">uint8_t</span> *) SEEPROM_ADDR;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">smart_eeprom_enabled</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> NVMCTRL-&gt;SEESTAT.bit.PSZ &gt; <span class="number">0</span> &amp;&amp; NVMCTRL-&gt;SEESTAT.bit.SBLK &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">wait_for_eeprom_ready</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> timeout = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span> (NVMCTRL-&gt;SEESTAT.bit.BUSY &amp;&amp; timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        timeout -= <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> !NVMCTRL-&gt;SEESTAT.bit.BUSY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">eeprom_read_byte</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uintptr_t</span> offset = (<span class="keyword">uintptr_t</span>)addr;</span><br><span class="line">    <span class="keyword">if</span> (offset &gt;= EEPROM_SIZE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!smart_eeprom_enabled()) &#123;</span><br><span class="line">        <span class="keyword">return</span> buffer[offset];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait_for_eeprom_ready();</span><br><span class="line">    <span class="keyword">return</span> smart_eeprom[offset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eeprom_write_byte</span><span class="params">(<span class="keyword">uint8_t</span> *addr, <span class="keyword">uint8_t</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uintptr_t</span> offset = (<span class="keyword">uintptr_t</span>)addr;</span><br><span class="line">    <span class="keyword">if</span> (offset &gt;= EEPROM_SIZE) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!smart_eeprom_enabled()) &#123;</span><br><span class="line">        buffer[offset] = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wait_for_eeprom_ready()) &#123;</span><br><span class="line">        smart_eeprom[offset] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code preserves the existing in-memory behavior for ATSAM chips without SmartEEPROM enabled, and supports presistent storage in chips with SmartEEPROM enabled. See the full change <a href="https://github.com/ottobonn/qmk_firmware/blob/ea1ea011d82f731dda9e02675097cfa20c88e5ce/tmk_core/common/arm_atsam/eeprom.c">here</a>.</p><h3 id="Supporting-EEPROM-in-the-keymap"><a href="#Supporting-EEPROM-in-the-keymap" class="headerlink" title="Supporting EEPROM in the keymap"></a>Supporting EEPROM in the keymap</h3><p>Using QMK, each supported keyboard can have more than one key layout. Each layout for a keyboard gets its own <code>keymap.c</code> file to define it. The keymap additionally defines user settings, including which values the user wants to store in EEPROM.</p><p>To support persistent storage for settings, then, we need to modify the default CTRL keymap that Drop provides. Each time the user changes a persisted setting, like LED brightness, we will save it to EEPROM immediately in case the keyboard loses power. On startup, we will read the settings from EEPROM and restore them to their in-memory variables.</p><!-- TODO aside: wear optimizations --><p>Using the QMK EEPROM library has a catch: there are two provided settings areas, one for keyboard settings and one for user settings, and each gets four bytes of EEPROM. We will pack our settings into the four bytes of keyboard storage, leaving the user storage available for individual user tweaks.</p><p>We have a lot to pack into four bytes, but some of the values are small, like booleans. We can use a C union type to overlay named fields onto a 4-byte integer:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> raw;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> led_animation_id: <span class="number">3</span>,</span><br><span class="line">            led_lighting_mode: <span class="number">2</span>,</span><br><span class="line">            led_animation_breathing: <span class="number">1</span>,</span><br><span class="line">            led_enabled: <span class="number">1</span>,</span><br><span class="line">            led_animation_direction: <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">uint8_t</span> gcr_desired;</span><br><span class="line">    <span class="keyword">uint8_t</span> led_animation_speed;</span><br><span class="line">    <span class="keyword">uint8_t</span> _unused;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">kb_config_t</span>;</span><br></pre></td></tr></table></figure><p>Next, we need to make this data structure the source of truth for the keyboard configuration so we can persist it to EEPROM and load it on startup. I did that by writing little helper functions for each keyboard setting key press handler. Here’s an example to advance to the next LED animation:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_pattern_next</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    kb_config.led_animation_id = (kb_config.led_animation_id + <span class="number">1</span>) % led_setups_count;</span><br><span class="line">    sync_settings(); <span class="comment">// implemented below</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’ve implemented functions to store values to the new structure, so the final touch is to save and load the structure from EEPROM.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load_saved_settings</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    kb_config.raw = eeconfig_read_kb();</span><br><span class="line"></span><br><span class="line">    led_animation_id = kb_config.led_animation_id;</span><br><span class="line">    gcr_desired = kb_config.gcr_desired;</span><br><span class="line">    led_lighting_mode = kb_config.led_lighting_mode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> prev_led_animation_breathing = led_animation_breathing;</span><br><span class="line">    led_animation_breathing = kb_config.led_animation_breathing;</span><br><span class="line">    <span class="keyword">if</span> (led_animation_breathing &amp;&amp; !prev_led_animation_breathing) &#123;</span><br><span class="line">        gcr_breathe = gcr_desired;</span><br><span class="line">        led_animation_breathe_cur = BREATHE_MIN_STEP;</span><br><span class="line">        breathe_dir = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    led_animation_direction = kb_config.led_animation_direction;</span><br><span class="line">    led_animation_speed = kb_config.led_animation_speed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> led_enabled = kb_config.led_enabled;</span><br><span class="line">    I2C3733_Control_Set(led_enabled);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_settings</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Save the keyboard config to EEPROM</span></span><br><span class="line">    eeconfig_update_kb(kb_config.raw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sync_settings</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    save_settings();</span><br><span class="line">    load_saved_settings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can find the full new keymap <a href="https://github.com/ottobonn/qmk_firmware/blob/ea1ea011d82f731dda9e02675097cfa20c88e5ce/keyboards/massdrop/ctrl/keymaps/default_md/keymap.c">here</a>.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I had already decided to keep my Drop CTRL before knowing whether EEPROM storage would work, so I am really glad it is possible to support after all! I am not sure why Drop hadn’t already implemented this feature, because a lot of users have been asking about it. It makes the keyboard way better to use, particularly on a laptop where the power is intermittent.</p><p>Thanks for reading! Hopefully this post helps if you’re a Drop CTRL or ALT owner who needs persistent settings storage.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- &lt;div class=&quot;ui message&quot;&gt;
  For more thoughts on the Drop CTRL in general, check out my full review.
&lt;/div&gt; --&gt;
&lt;p&gt;I recently bought a &lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>TS100 Soldering Iron with Battery Pack</title>
    <link href="https://travisgeis.com/2020/08/30/ts100-battery/"/>
    <id>https://travisgeis.com/2020/08/30/ts100-battery/</id>
    <published>2020-08-30T18:53:27.000Z</published>
    <updated>2020-08-30T19:12:37.312Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container">  <iframe src="https://www.youtube-nocookie.com/embed/UvxxDd-UDUQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><p>I’m really late to the party, but a few months ago I discovered the <a href="http://www.miniware.com.cn/product/ts100-soldering-iron-package-electric-soldering-kit/">TS100 soldering iron</a> from Miniware. It’s a tiny digital iron with temperature control and a way-overpowered microcontroller to drive it all. It’s cheap and light and I got it in the hopes of something a bit more convenient than my big Weller WES51, which takes up a lot of desk space.</p><p>Unfortunately the TS100 doesn’t come with a power supply or cable. It accepts DC input from 12V up to 24V, and I realized that my 18V Makita drill batteries would make for a convenient and portable soldering setup. I ordered an off-brand batery adapter to provide a barrel jack connecting to the battery, and soldered up a cable to connect to the iron.</p><p>I was hoping for silicone cable so that a stray touch of the iron wouldn’t melt the insulation. It turns out that finding silicone cable is difficult. I saw a tip online that I should look at tattoo machine cables, which often come in silicone, and ordered one from Amazon. It turns out that it isn’t really silicone, so if you know of where to find the real stuff please leave a comment!</p><p>In this video I walk through the finished project with the battery adapter and cable. Below, you will also find the prequel to the project, in which I modify the battery adapter to bypass its 12V output to get the full 18V of the battery. I am working on making more concise videos, but this isn’t one of them. If you plan to watch this one, grab a refreshing beverage and get comfy, because it’s long!</p><div class="video-container">  <iframe src="https://www.youtube-nocookie.com/embed/bm4L8A2kOdc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/UvxxDd-UDUQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autop
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Making a Handwriting Font with Calligraphr and FontForge</title>
    <link href="https://travisgeis.com/2020/08/25/handwriting-font/"/>
    <id>https://travisgeis.com/2020/08/25/handwriting-font/</id>
    <published>2020-08-26T02:53:53.000Z</published>
    <updated>2020-08-26T03:21:03.432Z</updated>
    
    <content type="html"><![CDATA[<style>  @font-face {    font-family: 'Travis Print One';    src: url('/uploads/2020/08/25/TravisPrintOne-Regular.woff2') format('woff2');  }  .handwritten, #titles h1 {    font-family: 'Travis Print One' !important;    line-height: 1.5;  }</style><div class="handwritten">  I have been reading about font design and evolving font technologies for a while, and I finally succumbed to the lure of making a font. I decided for this first foray to try to replicate my handwriting. This is the result!  <div class="video-container">    <iframe src="https://www.youtube-nocookie.com/embed/8a5-U7edcjU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>  </div><p>  In this video I walk through the process, from using <a href="https://calligraphr.com">Calligraphr</a> to capture the glyphs to using <a href="https://fontforge.org">FontForge</a> to fine-tune the spacing.</p><p>  I took the time to write out the common characters multiple times, so there are plenty of variations of each one (called “contextual alternatives” in font lingo). I also added some extra punctuation, math symbols, and common European language characters.</p><p>  <br></p><p>  Here are some fancy character examples:</p><p>  “This is a quoted phrase.”</p><p>  <b>Here’s some code:</b></p>  <pre class="handwritten">let x = 0;if (x < 10) {  // do something}  </pre><p>  And how about some nonsensical math:</p><p>  δχ/δt = 10;  ∀a∈A, ∃x s.t. …</p><p></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
  @font-face {
    font-family: &#39;Travis Print One&#39;;
    src: url(&#39;/uploads/2020/08/25/TravisPrintOne-Regular.woff2&#39;) format(&#39;woff2&#39;)
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>The Magic of Meteor&#39;s Reactivity</title>
    <link href="https://travisgeis.com/2020/07/30/magic-of-meteor-reactivity/"/>
    <id>https://travisgeis.com/2020/07/30/magic-of-meteor-reactivity/</id>
    <published>2020-07-31T03:22:00.000Z</published>
    <updated>2020-07-31T05:22:21.700Z</updated>
    
    <content type="html"><![CDATA[<p>Reactive programming is one of the strong points of Meteor. For example, it’s what allows your Meteor app’s client views to rerender when data in Mongo collections changes.</p><p>Because Meteor is built with reactive capabilities, a new Meteor app gets the benefits of reactive programming right out of the box. But how does reactive programming actually work? In this article, we’ll dive behind the scenes of reactive programming in Meteor, and learn about some common points of confusion and their solutions along the way.</p><h2 id="Reactive-Programming-in-Meteor"><a href="#Reactive-Programming-in-Meteor" class="headerlink" title="Reactive Programming in Meteor"></a>Reactive Programming in Meteor</h2><p>Let’s take a moment to review reactive programming for those just getting started in Meteor or who haven’t used it before. Commonly throughout Meteor apps, you’ll see code like the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tracker.autorun(<span class="function"><span class="keyword">function</span> <span class="title">updateTimezone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> user = Meteor.user();</span><br><span class="line">  currentTemplate.timezone.set(user.timezone);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In this example, we fetch the current user with <code>Meteor.user()</code>, and update the timezone of our fictional page’s template with the timezone stored on the user object. Our <code>updateTimezone</code> function is passed as the argument to <code>Tracker.autorun</code>, which will run the function immediately, and then run it again any time the return value of <code>Meteor.user</code> changes.</p><p>When I first encountered this reactivity, it seemed like magic. How could the autorun “know” when the return value of our call to <code>Meteor.user</code> would be different on the next call, without constantly calling the function? Furthermore, how could it possibly know which parts of our function were reading reactive data without reading our JavaScript and understanding it?</p><p>As usual with programming, it’s not magic, but in this case some pretty cool stuff is happening behind the scenes. Let’s take a closer look to see how it works!</p><h2 id="Behind-the-Scenes-Tracker-autorun"><a href="#Behind-the-Scenes-Tracker-autorun" class="headerlink" title="Behind the Scenes: Tracker.autorun"></a>Behind the Scenes: <code>Tracker.autorun</code></h2><p>Let’s dive right in and see how Meteor handles things behind the scenes, considering again our example with <code>Tracker</code>. Here’s the code again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tracker.autorun(<span class="function"><span class="keyword">function</span> <span class="title">updateTimezone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> user = Meteor.user();</span><br><span class="line">  currentTemplate.timezone.set(user.timezone);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And below, we can see the definition of Tracker.autorun. It’s quite short! (I’ve omitted a few of the argument checks for brevity):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Tracker.autorun = <span class="function"><span class="keyword">function</span> (<span class="params">f, options</span>) </span>&#123;</span><br><span class="line">  constructingComputation = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="keyword">new</span> Tracker.Computation(</span><br><span class="line">    f, Tracker.currentComputation, options.onError);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Tracker.active)</span><br><span class="line">    Tracker.onInvalidate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      c.stop();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>When we call <code>Tracker.autorun</code>, it constructs a <code>Computation</code> object. The Meteor docs define <a href="https://docs.meteor.com/api/tracker.html#tracker_computation">Computation</a>:</p><blockquote><p>A Computation object represents code that is repeatedly rerun in response to reactive data changes.</p></blockquote><p>In this case, the code that will rerun is the function <code>setTimezone</code> that we pass to <code>Tracker.autorun</code>. Tracker passes our function (which it calls <code>f</code>) to the new computation, which stores it internally. The computation immediately calls <code>setTimezone</code>.</p><p>The rest of <code>Tracker.autorun</code> handles stopping the new computation if the current computation is invalidated. <!-- TODO expand on this explanation --></p><p>To see how the autorun reacts to changes in its inputs, we have to dig a little further, into the definition of <code>Computation</code>.</p><h2 id="Tracker-Computation"><a href="#Tracker-Computation" class="headerlink" title="Tracker.Computation"></a>Tracker.Computation</h2><p>Our code gets the current user information with a call to <code>Meteor.user</code>. We want our computation to rerun when anything about the user changes, so <code>Meteor.user</code> is a “dependency” of our computation.</p><p>The Meteor docs define a <a href="https://docs.meteor.com/api/tracker.html#tracker_dependency">Dependency</a> for us:</p><blockquote><p>A Dependency represents an atomic unit of reactive data that a computation might depend on. Reactive data sources such as Session or Minimongo internally create different Dependency objects for different pieces of data, each of which may be depended on by multiple computations. When the data changes, the computations are invalidated. […] Conceptually, the only two things a Dependency can do are gain a dependent and change.</p></blockquote><p>In our example, we’ve created one Computation, and it has one Dependency. When the Dependency changes, our Computation will rerun.</p><p>Now we’ve defined the core terms involved in reactive programming. But how does our computation “know” when to rerun? And how does the Dependency signal that it is a reactive data source?</p><h2 id="Inside-the-Dependency"><a href="#Inside-the-Dependency" class="headerlink" title="Inside the Dependency"></a>Inside the Dependency</h2><p>Using our knowledge of the relationship between Computation and Dependency, we can move to an understanding of the full reactive programming picture.</p><p>The Dependency class contains the secret that makes it all work. When we first call <code>Tracker.autorun</code>, Tracker constructs a new Computation and passes our code to it. Our code runs right away, which is convenient for us, but something more important is happening: during the first run of our code, we read from the reactive data sources we care about, and in doing so, we trigger a special dependency registration behind the scenes.</p><p>Each time we read from a reactive source, the source we’re reading calls <code>Dependency#depend</code> on its own internal dependency object and passes in the current computation, indicating that the current computation depends on this source. The internal dependency maintains a mapping of computation IDs to the corresponding Computation objects. When the reactive data source tells the dependency that the data have changed, the dependency loops through its internal collection of computations and invalidates each of them. After invalidating each computation, the dependency also removes it from the list of dependants.</p><h3 id="Pitfall-your-function-must-read-from-a-dependency-in-order-to-react-to-its-changes"><a href="#Pitfall-your-function-must-read-from-a-dependency-in-order-to-react-to-its-changes" class="headerlink" title="Pitfall: your function must read from a dependency in order to react to its changes"></a>Pitfall: your function must read from a dependency in order to react to its changes</h3><p>It’s important to keep in mind that from the computation’s perspective, our code is a black box. It can’t read and understand our intent like a human would!</p><p>To figure out what our code depends on, the computation <em>assumes</em> that we will read from every dependency we care about, every time our function runs. The computation will depend only on the dependencies it used the first time it ran. If you don’t read from a certain dependency, that dependency can’t rerun your computation.</p><h2 id="Tracker-currentComputation-and-the-power-of-global-variables"><a href="#Tracker-currentComputation-and-the-power-of-global-variables" class="headerlink" title="Tracker.currentComputation and the power of global variables"></a><code>Tracker.currentComputation</code> and the power of global variables</h2><p>Reactive data sources aren’t magical after all:</p><ol><li>Your function in an autorun reads from the reactive data source, which maintains an internal dependency object.</li><li>The data source (e.g., a Mongo lookup) passes a reference to the current computation to that dependency, and the depedency stores it.</li><li>The next time the reactive source has new information, like an updated Mongo document, it signals all of the dependencies’ computations that they should rerun by invalidating them.</li><li>Tracker reruns all of the invalidated computations on subsequent turns of the event loop</li></ol><p>The exploitable detail of this arrangement is JavaScript’s single-threaded runtime, which permits only one function to run at a time. Because the Tracker can safely assume only one function will run at once (and therefore only one Computation will run at once), it can save a reference to the <code>currentComputation</code> as a global variable! You can see the current computation for yourself in <code>Tracker.currentComputation</code>.</p><p>Storing the current computation in a global variable means that any reactive data source can find it trivially in order to pass it to internal Dependency objects. Whenever code in a reactive data source is running, it knows that at most one Computation could depend on the result: the global <code>currentComputation</code>.</p><p>It’s popular to hate on global variables these days, but the use of a global <code>currentComputation</code> is simplification at its finest. I hope this brief dip into Meteor’s reactive programming was helpful. See you next time!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Reactive programming is one of the strong points of Meteor. For example, it’s what allows your Meteor app’s client views to rerender when
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ACTUALLY WORKING LINUX TOUCHPAD</title>
    <link href="https://travisgeis.com/2020/07/29/actually-working-linux-touchpad/"/>
    <id>https://travisgeis.com/2020/07/29/actually-working-linux-touchpad/</id>
    <published>2020-07-30T04:12:02.000Z</published>
    <updated>2020-07-30T04:37:03.095Z</updated>
    
    <content type="html"><![CDATA[<p>Remember <a href="https://www.travisgeis.com/2017/01/01/dell-precision/#3-Adjust-the-touchpad">my post about the Dell Precision 5510</a>? I dwelled quite a while on how to adjust the touchpad to something even slightly workable, to defend against stray taps. My “solution” was to add a deadzone to the top and right of the pad so touches starting there wouldn’t register as mouse movement.</p><p>That solution was always a hack, and I finally decided to pursue a real fix again. I am delighted, thrilled, positively floored to report that good touchpad support is here for Linux in the form of libinput drivers.</p><p>I just upgraded to Linux Mint 20, and noticed that my touchpad was behaving weirdly again. After a deep dive into the touchpad forum rabbit hole, here’s what I learned:</p><ul><li>My laptop is using libinput for mouse support</li><li>libinput <em>should</em> support good palm rejection</li></ul><p>But, there’s a twist! Check out the Linux Mint 20 <a href="https://www.linuxmint.com/rel_ulyana_cinnamon.php">release notes</a>, specifically the “Touchpad drivers” section:</p><blockquote><p>The default touchpad driver in this edition is “libinput” (provided by the xserver-xorg-input-libinput package). […] When both drivers are installed, “synaptics” takes priority.</p></blockquote><p>Searching my selected packages for “synaptics,” I found that somehow I had <code>xserver-xorg-input-synaptics</code> installed! Removing this package and logging in again is <em>all it took</em> to get amazing, MacBook-level touchpad support.</p><a href="/uploads/2020/07/synaptics-package.png"><img src="/uploads/2020/07/body-synaptics-package.png"></a><p>So, here it is: <strong>if you’re running a new Ubuntu-flavored distro, make sure you know which input driver you’re using!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Remember &lt;a href=&quot;https://www.travisgeis.com/2017/01/01/dell-precision/#3-Adjust-the-touchpad&quot;&gt;my post about the Dell Precision 5510&lt;/a&gt;?
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Inside an Anker Power Strip with USB Power</title>
    <link href="https://travisgeis.com/2020/07/28/inside-an-anker-power-strip-with-usb-power/"/>
    <id>https://travisgeis.com/2020/07/28/inside-an-anker-power-strip-with-usb-power/</id>
    <published>2020-07-29T04:24:06.000Z</published>
    <updated>2020-07-29T04:36:46.695Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container">  <iframe src="https://www.youtube-nocookie.com/embed/GPxFERSx3j0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><p>Cords abound in my networking cabinet, and this power strip replaces a small 6-outlet model. Normally, I avoid low-voltage DC outputs on my commodity AC wiring components like power strips, but this time I decided to give it a try. I still won’t wire a USB port into the wall, but I have to say these USB ports on the power strip are pretty handy for keeping things charged up while they sit in the cabinet. USB adapters often end up taking many of the power outlets on our power strips, so the USB ports could mean considerable space savings if we’re okay with the no-frills 5V charging output.</p><p>This power strip also includes a 500-volt surge protector and has 3 USB outputs with the Anker “power iQ” logo above them. Tearing it apart reveals a nice DC converter for those ports but nothing special in the way of QuickCharge or USB Power Delivery (which I don’t think even works on type-A connectors). In this case, they seem to be using the logo to mean “beefy DC current capacity”, a total of 3.1A across all three ports.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/GPxFERSx3j0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autop
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Graphical superuser without password on Linux Mint</title>
    <link href="https://travisgeis.com/2020/07/24/graphical-superuser-without-password-on-linux-mint/"/>
    <id>https://travisgeis.com/2020/07/24/graphical-superuser-without-password-on-linux-mint/</id>
    <published>2020-07-25T03:48:40.000Z</published>
    <updated>2020-07-25T04:56:30.209Z</updated>
    
    <content type="html"><![CDATA[<p>Today I got tired of typing my password into a dialog in Linux Mint every time I want to take an action that requires elevated privileges. Windows seems to make passwordless privilege escalation possible with an OS-level dialog, and I don’t see why the same would not apply to Linux.</p><p>For now, since I am the only user on my laptop, I have disabled the prompts for passwords by editing the policy kit config. I created a new file:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/polkit-1/localauthority/50-local.d/99-sudonopassword.pkla</span><br></pre></td></tr></table></figure><p>I added the following to the new file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[No password prompt]</span><br><span class="line">Identity=unix-group:sudo</span><br><span class="line">Action=*</span><br><span class="line">ResultActive=yes</span><br><span class="line">ResultInactive=yes</span><br></pre></td></tr></table></figure><p>The title in square brackets is arbitrary. This config grants passwordless superuser access to anyone in the <code>sudo</code> user group, which seems pretty safe to me. I’d be grateful to hear any arguments for why this is a bad idea, but I haven’t found a convincing one yet.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I got tired of typing my password into a dialog in Linux Mint every time I want to take an action that requires elevated privileges
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Replacing the battery in my Dell Precision 5510 laptop</title>
    <link href="https://travisgeis.com/2020/07/23/replacing-the-battery-in-my-dell-precision-5510-laptop/"/>
    <id>https://travisgeis.com/2020/07/23/replacing-the-battery-in-my-dell-precision-5510-laptop/</id>
    <published>2020-07-24T03:38:32.000Z</published>
    <updated>2020-07-29T04:37:50.227Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container">  <iframe src="https://www.youtube-nocookie.com/embed/yvF7JxnT4lM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><p>My 2016 Dell Precision 5510 is getting long in the tooth for a laptop. I ordered a <a href="https://www.ifixit.com/Store/PC-Laptop/Dell-XPS-15-9550-and-5510-Precision-84-Wh-Replacement-Battery/IF244-006?o=1">replacement battery from iFixit</a> and swapped out the aging original battery, which was only holding 46% of its rated capacity.</p><a href="/uploads/2020/07/battery.png"><img src="/uploads/2020/07/body-battery.png" title="The original battery stats"></a><p>The battery life is bearable now, but it’s still no MacBook…</p><p>I also took my order as an opportunity to pick up iFixit’s <a href="https://www.ifixit.com/Store/Tools/Mako-Driver-Kit--64-Precision-Bits/IF145-299?o=4">Mako 64-bit driver kit</a>, and I love it! It’s replacing a cheap Radioshack kit that I’m constantly spilling on the floor.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/yvF7JxnT4lM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autop
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Inside the Apollo Kinetics Pulse</title>
    <link href="https://travisgeis.com/2020/07/11/inside-the-apollo-kinetics-pulse/"/>
    <id>https://travisgeis.com/2020/07/11/inside-the-apollo-kinetics-pulse/</id>
    <published>2020-07-12T02:49:08.000Z</published>
    <updated>2020-07-29T04:34:00.111Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container">  <iframe src="https://www.youtube-nocookie.com/embed/_ja_-Z7yUZ0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><p>Looking for a massage gun? I was, and the popular Hypervolt was selling for $300, which seemed pretty steep.</p><p>A few hours of comparison shopping later, I ended up with what I am pretty sure is the same product under a different brand name, for $80. In this video I tear it open to analyze the design and see if it’s a good deal or a cheap knockoff. Spoiler: it’s a good deal!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/_ja_-Z7yUZ0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autop
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Homeassistant in Docker on Synology NAS</title>
    <link href="https://travisgeis.com/2020/07/05/homeassistant-in-docker-on-synology-nas/"/>
    <id>https://travisgeis.com/2020/07/05/homeassistant-in-docker-on-synology-nas/</id>
    <published>2020-07-06T02:13:08.000Z</published>
    <updated>2020-07-12T03:00:15.854Z</updated>
    
    <content type="html"><![CDATA[<p>I use <a href="https://www.home-assistant.io/">homeassistant</a> to control my apartment’s lighting and some other fun things like the tea kettle. I definitely recommend it; it’s open-source and very easy to set up, and it supports many devices right away with minimal fuss. I’ll go into more detail on my home automation devices in another post. This one is about the software, and the surprising complexity of home networks.</p><p>Many people run homeassistant on a <a href="https://www.raspberrypi.org/">Raspberry Pi</a>, but I already had a <a href="https://www.synology.com/en-global/products/DS218+">Synology DS218+</a> NAS (network-attached storage) device that I wanted to use for home automation, too. It’s a suprisingly capable little Linux server, and since it’s always running anyway for network backups, it’s a good candidate for a home automation server.</p><p>In this blog post I want to explain some of the challenges of setting up a cluster of applications on the NAS and how I eventually decided to do it.</p><h2 id="Docker-for-personal-projects"><a href="#Docker-for-personal-projects" class="headerlink" title="Docker for personal projects"></a>Docker for personal projects</h2><p>The NAS is a computer like any other, so one option for setting up additional apps on it is to install them normally and let them control the NAS’s available ports to talk to the local network. However, installing applications one-by-one like you might on a personal computer has a few downsides:</p><ul><li>The applications might not be compatible with Synology’s specific Linux distribution, “DSM” (I’m not even sure what distro it’s based on).</li><li>Synology updates could inadvertently wipe out or break third-party apps I’ve installed, particularly if I need to reconfigure a preinstalled app like nginx.</li><li>I will <em>definitely forget</em> how I installed the apps, and when I get a new NAS I will have to start from scratch to set thigs up again.</li></ul><p>Instead of installing the apps individually, I committed to using <a href="https://www.docker.com/">Docker</a> to run each app in its own container. Docker is useful in a professional software environment for isolating applications from their host operating system and managing their dependencies, but it’s also amazing for personal projects, because it allows the developer to completely describe how an application should be configured so that the setup is reproducible later. It’s very easy to forget how a personal project works, so I really value the self-documenting nature of docker containers.</p><h2 id="Default-ports-on-Synology-NAS"><a href="#Default-ports-on-Synology-NAS" class="headerlink" title="Default ports on Synology NAS"></a>Default ports on Synology NAS</h2><p>Okay, there’s a catch—surely you knew there would be!</p><p>The Synology NAS runs its own web server, listening on ports 80 and 443 (the defaults for HTTP and HTTPS). While it is possible to free those two ports, doing so involves editing the default nginx configuration files for the NAS to move its web applications to other default ports, and those changes might not persist across OS updates. Furthermore, changes to the default ports make the NAS more annoying to use for its original purpose, and might break features that the Synology developers add later on.</p><p>I wanted to preserve the original functionality of the NAS, so I opted not to mess with the default ports. I assumed there must be a better way, and this blog post documents some of them.</p><h2 id="Running-homeassistant-in-host-networking-mode"><a href="#Running-homeassistant-in-host-networking-mode" class="headerlink" title="Running homeassistant in host networking mode"></a>Running homeassistant in host networking mode</h2><p>I started by <a href="https://www.home-assistant.io/docs/installation/docker/">running homeassistant in its own Docker container in host networking mode</a>, listening on its default port of 8123. In host networking mode, the Docker container attaches directly to the network interface of the host computer, so it behaves like the application is running on the host for the purposes of networking.</p><p>In this configuration, Docker provides isolation from the host operating system and keeps other ports on the container closed to traffic, and we still get the dependency management and reproducible setup of Docker containers, but we aren’t taking advantage of any virtual networking features.</p><p>My NAS is on the local network at <code>nas.ivy.travisgeis.com</code>, so I could see the homeassistant web interface at <code>nas.ivy.travisgeis.com:8123</code>. The NAS doesn’t use port 8123 for anything else, so it was available for homeassistant to use. Setting up this way was very quick, but I’m picky and I don’t like typing port 8123 every time I visit the homeassistant UI! I want to be able instead to use a different URL, like <code>homeassistant.example.com</code> to access the UI without specifying a port, which means the application needs to be available on the default port 80.</p><h2 id="nginx-as-reverse-proxy"><a href="#nginx-as-reverse-proxy" class="headerlink" title="nginx as reverse proxy"></a>nginx as reverse proxy</h2><p>With homeassistant running and the goal of making it available on its own URL, the next step is to add a reverse proxy to route traffic at this new URL to the actual port 8123. A reverse proxy intercepts traffic on the host machine and can route it to different applications based on properties of the traffic like the URL, the port, or the protocol.</p><p>I am familiar with <a href="http://nginx.org/">nginx</a>, a popular web server, so I decided to use it as a reverse proxy, but there are other options with the same features. Here is a diagram of nginx running as a reverse proxy on the NAS, directing traffic to our homeassistant URL to the homeassistant port, 8123:</p><p><img src="nginx-reverse-proxy.svg" alt=""></p><p>This diagram shows how other services could use additional ports on the host, but I only configured homeassistant to run this way.</p><p><a href="/nginx-configuration-for-reverse-proxy-to-different-ports">Here is the nginx config</a> I used to set it up.</p><p>This nginx configuration declares one server listening on port 80, passing all traffic to <code>http://localhost:$target_port</code>. The target port comes from the mapping declared above, based on the name of the service. For the case of homeassistant, <code>homeassistant.nas.ivy.travisgeis.com</code> will provide a <code>$name</code> of “homeassistant,” which will map to port 8123.</p><p>This nginx reverse proxy works well for simple services like homeassistant that run on the host’s network and need to expose one or a handful of ports. However, it doesn’t work for services that need to listen to non-http network traffic, like a DNS server. My next project was to set up <a href="https://pi-hole.net/">pihole</a>, a DNS server and ad blocker, so I was back on the hunt for a way to have multiple apps running on the NAS seamlessly.</p><p>One caveat for running nginx this way on the NAS: Synology provides its own default nginx configuration, and nginx runs on the NAS to host the buit-in web interfaces. In order for this copy of nginx to bind to port 80, I had to stop the already-running default instance. <a href="https://tech.setepontos.com/2018/03/25/control-synology-dsm-services-via-terminal-ssh/">Here is a good guide</a> on managing built-in services with Synology’s package system, “synopackagectl”.</p><h2 id="Aside-Running-nginx-in-a-container"><a href="#Aside-Running-nginx-in-a-container" class="headerlink" title="Aside: Running nginx in a container"></a>Aside: Running <a href="(http://nginx.org/">nginx</a> in a container</h2><p>Because the NAS already had a global nginx configuration for serving its own web interface, I wanted to run a separate copy of nginx in a container. Running my copy in a container keeps my configuration isolated from the global configs, and provides the usual ease of building that containers allow.</p><p>While I was researching running nginx in a container, I happened across <a href="https://nginxproxymanager.com/">Nginx Proxy Manager</a>. It provides a graphical interface for configuring reverse-proxy settings for different services, further reducing the risk of completely forgetting how everything works.</p><h2 id="Adding-pihole"><a href="#Adding-pihole" class="headerlink" title="Adding pihole"></a>Adding <a href="https://pi-hole.net/">pihole</a></h2><p>Next I wanted to set up pihole for LAN-wide ad blocking. pihole is a bit different from homeassistant, because it requires access to DNS queries, which don’t (usually) happen over HTTP.</p><p>Running pihole poses a few challenges:</p><ul><li>It needs access to non-HTTP ports.</li><li>It also wants to run a server on port 80 for its web UI.</li><li>It needs to have its own IP address, so the LAN router can point to it as the DNS server.</li></ul><p>Pihole expects to run on the LAN at a static IP on a dedicated host. To get it running in Docker, I needed to emulate a separate host within the Synology NAS.</p><h2 id="Multiple-virtual-hosts-with-Docker-macvlan"><a href="#Multiple-virtual-hosts-with-Docker-macvlan" class="headerlink" title="Multiple virtual hosts with Docker macvlan"></a>Multiple virtual hosts with Docker macvlan</h2><p>Docker has a networking driver called <a href="https://docs.docker.com/network/macvlan/">macvlan</a> that allows each container to have its own (virtualized) MAC address and IP address on the LAN. Perfect for the pihole! Thanks to <a href="http://tonylawrence.com/posts/unix/synology/free-your-synology-ports/">Tony Lawrence for his excellent guide</a> on setting up macvlan, which I adapted for this setup.</p><p>Using macvlan results in a pretty different network topology than using the host-mode network recommended for homeassistant. Each container on the macvlan network gets a unique IP address and MAC address on the LAN, and the macvlan network is isolated from the host. Basically you get extra virtual hosts from one computer!</p><p>Here are the basic steps required to transition the containers to a macvlan network:</p><ul><li>Decide on a range of IP addresses for the Docker containers</li><li>Create the macvlan network in Docker and allocate the reserved IP addresses to it.</li><li>Attach the containers to the new macvlan network.</li></ul><p>Here’s a diagram of the macvlan network topology:</p><p><img src="nginx-macvlan.svg" alt=""></p><p>Each container gets its own MAC address and IP address, and each containerized application thinks it’s on its own host computer. We know the container IP addresses won’t collide with the DHCP-assigned network addresses because we’ve allocated different ranges for them. Below, I will detail each step for this setup.</p><h3 id="Choose-Docker-IP-addresses"><a href="#Choose-Docker-IP-addresses" class="headerlink" title="Choose Docker IP addresses"></a>Choose Docker IP addresses</h3><p>First, decide on a subset of IP addresses to reserve for Docker. My DHCP server allocates 192.168.0.100-192.169.0.199, so I reserved 192.168.0.200-192.168.0.207 (192.168.0.200/29 in CIDR notation) for Docker containers. Each container will specify its own port in this range, so I can route to each through the nginx reverse proxy.</p><h3 id="Create-the-macvlan-network-in-Docker"><a href="#Create-the-macvlan-network-in-Docker" class="headerlink" title="Create the macvlan network in Docker"></a>Create the macvlan network in Docker</h3><p>I manage all the Docker containers with Docker compose, but they need to share a single macvlan network so they can communicate with each other. There is no easy way to create a shared network in Docker Compose, so I create one with the Docker CLI:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network create -d macvlan \</span><br><span class="line">  --subnet=192.168.0.0/24 \</span><br><span class="line">  --gateway=192.168.0.1 \</span><br><span class="line">  --ip-range=192.168.0.200/29 \</span><br><span class="line">  --aux-address <span class="string">&#x27;host=192.168.0.101&#x27;</span> \</span><br><span class="line">  -o parent=eth0 vlan</span><br></pre></td></tr></table></figure><p>This command creates a macvlan network called <code>vlan</code> and allows it to allocate IP addresses 192.168.0.200-192.168.0.207. The parent interface is <code>eth0</code>, the Ethernet interface of the NAS.</p><h3 id="Reserve-Docker-IPs-and-route-to-them"><a href="#Reserve-Docker-IPs-and-route-to-them" class="headerlink" title="Reserve Docker IPs and route to them"></a>Reserve Docker IPs and route to them</h3><p>The containers on the macvlan network are isolated from the host by default. Add a routing rule to route the Docker subset to the macvlan network so the host can see the containers:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ip link add macvlan link eth0 <span class="built_in">type</span> macvlan mode bridge</span><br><span class="line">sudo ip addr add 192.168.0.101/24 dev macvlan</span><br><span class="line">sudo ip link <span class="built_in">set</span> macvlan up</span><br><span class="line">sudo ip route add 192.168.0.200/29 dev macvlan</span><br></pre></td></tr></table></figure><p>These commands add a link network called “macvlan” to the NAS network configuration. This part was really hard to get right, because it’s right at the edge of my understanding of Linux networking. The second line attaches the new link to a range of IP addresses starting at 192.168.0.101, the third line starts it up, and the fourth line routes packets addresses to IP addresses 192.168.0.200-192.168.0.207 to the new link, which means they will end up available to the Docker containers.</p><h3 id="Attach-the-containers-to-the-network-in-docker-compose-files"><a href="#Attach-the-containers-to-the-network-in-docker-compose-files" class="headerlink" title="Attach the containers to the network in docker-compose files"></a>Attach the containers to the network in docker-compose files</h3><p>Finally, now that we have the “vlan” network, we need to specify that each container should attach to it. Add this “networks” config to <code>docker-compose.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">vlan</span></span><br></pre></td></tr></table></figure><h2 id="GitHub-repo"><a href="#GitHub-repo" class="headerlink" title="GitHub repo"></a>GitHub repo</h2><p>Check out <a href="https://github.com/ottobonn/dsm-containers">the project on GitHub</a> for the full configuration.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I use &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;homeassistant&lt;/a&gt; to control my apartment’s lighting and some other fun things like the te
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>1547425872426</title>
    <link href="https://travisgeis.com/2019/01/13/1547425872426/"/>
    <id>https://travisgeis.com/2019/01/13/1547425872426/</id>
    <published>2019-01-14T03:24:38.000Z</published>
    <updated>2020-07-24T03:37:30.282Z</updated>
    
    <content type="html"><![CDATA[<a href="/uploads/2019/01/1547425872426.jpg"><img src="/uploads/2019/01/body-1547425872426.jpg"></a><h2 id="1547425872426"><a href="#1547425872426" class="headerlink" title="1547425872426"></a>1547425872426</h2><p>13 January 2019<br>Watercolor and ink on paper, 12” x 12”</p><p><small>Sold 23 July 2020</small></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a href=&quot;/uploads/2019/01/1547425872426.jpg&quot;&gt;&lt;img src=&quot;/uploads/2019/01/body-1547425872426.jpg&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1547425872426&quot;&gt;&lt;a href=&quot;#154742
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Watch Movement Posters</title>
    <link href="https://travisgeis.com/2018/12/08/watch-movement-posters/"/>
    <id>https://travisgeis.com/2018/12/08/watch-movement-posters/</id>
    <published>2018-12-09T07:03:53.000Z</published>
    <updated>2020-07-12T03:01:16.935Z</updated>
    
    <content type="html"><![CDATA[<p>I was inspired by the art-deco national parks posters and decided to make some posters of famous watch movements in a similar style.</p><h2 id="ETA-Unitas-6497-1"><a href="#ETA-Unitas-6497-1" class="headerlink" title="ETA Unitas 6497-1"></a>ETA Unitas 6497-1</h2><a href="/uploads/2018/12/ETA-6497-1.png"><img src="/uploads/2018/12/body-ETA-6497-1.png" alt="An art-deco-style poster of the 6497-1 watch movement."></a><p>The first one is the ETA 6497-1 “Unitas” movement, a staple of the industry. It’s a hand-wound, time-only, 17-jewel movement beating at 18,000 vibrations per hour.</p><h2 id="Jaeger-LeCoultre-925-1"><a href="#Jaeger-LeCoultre-925-1" class="headerlink" title="Jaeger-LeCoultre 925/1"></a>Jaeger-LeCoultre 925/1</h2><a href="/uploads/2018/12/JLC-925-1.png"><img src="/uploads/2018/12/body-JLC-925-1.png" alt="An art-deco-style poster of the JLC 925&#x2F;1 watch movement."></a><p>The second is the Jaeger-LeCoultre 925/1 moonphase movement. This in-house, free-sprung automatic movement beats at 4 Hz and features center seconds, with concentric moonphase and pointer date at 6 o’clock.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was inspired by the art-deco national parks posters and decided to make some posters of famous watch movements in a similar style.&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Drawing fractals in the browser with L-systems and ES6</title>
    <link href="https://travisgeis.com/2018/04/24/drawing-fractals-in-the-browser-with-l-systems-and-es6/"/>
    <id>https://travisgeis.com/2018/04/24/drawing-fractals-in-the-browser-with-l-systems-and-es6/</id>
    <published>2018-04-24T07:00:00.000Z</published>
    <updated>2020-07-12T03:03:15.023Z</updated>
    
    <content type="html"><![CDATA[<p>This article is from a recent engineering talk I gave at <a href="https://www.qualia.com">Qualia</a>.</p><div style='position:relative;padding-bottom:54%'><iframe src='https://gfycat.com/ifr/GrotesqueEasygoingDog' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0' allowfullscreen></iframe></div><p>Here’s what we’ll make! L-systems are great for modeling plants…</p><p>Fractals are a beautiful cross between math, visualization, and art. Unfortunately, making computer programs draw pictures can be pretty complicated. Luckily, modern web browsers have powerful graphics features built in, and nearly everyone has a web browser. The browser is actually a pretty good place to start playing around with fractal graphics!</p><p>In this post, we will look at one simple approach for modeling fractals, and how to draw them in the web browser. I’ll also cover a cool new feature of JavaScript, called generators, and show how they might come in handy for drawing fractals.</p><h2 id="Some-theory-modeling-fractals-with-L-systems"><a href="#Some-theory-modeling-fractals-with-L-systems" class="headerlink" title="Some theory: modeling fractals with L-systems"></a>Some theory: modeling fractals with L-systems</h2><p>To start things off, let’s think about how we might represent a fractal in a computer program. There are many ways to think about fractals, but in this post, I want to focus on one approach, called L-systems, because they are easy to understand and quick to implement.</p><p>Aristid Lindenmeyer invented <a href="https://en.wikipedia.org/wiki/L-system">L-systems</a>, or Lindenmeyer systems, as a way to model the growth of bacteria and fungi, and people later used them to model plants and other biological systems. The basic idea of an L-system is to use strings of characters to model the evolution of a living system. Each character symbolizes some part of the creature, like a cell, leaf, or branch. The system starts with an initial string, and by following some rules for manipulating the initial string, we end up modeling the change in the living creature over time by generating progressively more complex strings.</p><h3 id="Defining-the-L-system"><a href="#Defining-the-L-system" class="headerlink" title="Defining the L-system"></a>Defining the L-system</h3><p>An L-system is a formal grammar, which means it is a set of rules for producing strings in a formal language. Mathematically, it’s defined as a tuple,</p><p>G = (V, ω, P)</p><p>where:</p><ul><li>V is the alphabet of characters, or symbols</li><li>ω is the starting string, also called the axiom, containing symbols from V</li><li>P is a set of production rules, also called “productions,” for evolving the system from one string to the next.</li></ul><p>Each production specifies how to convert one input character from the current state of the system into one or more output characters for the next state.</p><p>Starting with the axiom, we apply the appropriate production to each character to get the string representing the first generation. To get the second generation, we apply our productions to all of the symbols in the first generation, and so on. We can model generations indefinitely by applying the productions again and again.</p><p>Despite the complex-sounding theory, L-systems are really just find-and-replace rules, like you would use in a basic text editor.</p><h3 id="Modeling-a-plant"><a href="#Modeling-a-plant" class="headerlink" title="Modeling a plant"></a>Modeling a plant</h3><p>Let’s look at how to model this tree-like plant:</p><a href="/uploads/2018/04/24/three-trees.png"><img src="/uploads/2018/04/24/body-three-trees.png" alt="Three fractal trees"></a><p>Three fractal trees</p><p>First, we define the three elements of our L-system:</p><ul><li>V (the vocabulary) will contain the characters <code>X</code> and <code>F</code>, and the additional symbols <code>[]+-</code></li><li>ω (the starting string) will just be <code>X</code></li></ul><p>P will contain these two productions:</p><ul><li><code>X</code>→<code>F[−X][X]F[−X]+FX</code></li><li><code>F</code>→<code>FF</code></li></ul><p>In each generation, we will use one string to symbolize the current state of our model, which in this case is the shape of our plant. We begin by setting the state string equal to the axiom. To grow the plant by one generation, we replace the <code>X</code> with <code>F[−X][X]F[−X]+FX</code>. To grow it by another generation, we replace every <code>X</code> with <code>F[−X][X]F[−X]+FX</code>, and every <code>F</code> with <code>FF</code>.</p><p>We only have productions corresponding to <code>X</code> and <code>F</code>, so when we encounter any other character in the system state, like <code>[</code>, we just copy it over to the new state string. Symbols like <code>[</code>, for which there are no productions, are called constants.</p><p>The strings look complicated, but the process we follow is always the same: we replace each character in the current state string with the right-hand-side of its corresponding production rule.</p><h3 id="Evolving-the-model"><a href="#Evolving-the-model" class="headerlink" title="Evolving the model"></a>Evolving the model</h3><p>We’ve defined all we need for our L-system. Let’s evolve it for a few generations and see what happens!</p><p>To watch our model of a plant grow, we start with the axiom and run each rule on it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X</span><br><span class="line"></span><br><span class="line">F[−X][X]F[−X]+FX</span><br><span class="line"></span><br><span class="line">FF[-F[-X][X]F[-X]+FX][F[-X][X]F[-X]+FX]FF[-F[-X][X]F[-X]+FX]+FFF[-X][X]F[-X]+FX</span><br><span class="line"></span><br><span class="line">FFFF[-FF[-F[-X][X]F[-X]+FX][F[-X][X]F[-X]+FX]FF[-F[-X][X]F[-X]+FX]+FFF[-X][X]F[-X]+FX][FF[-F[-X][X]F[-X]+FX][F[-X][X]F[-X]+FX]FF[-F[-X][X]F[-X]+FX]+FFF[-X][X]F[-X]+FX]FFFF[-FF[-F[-X][X]F[-X]+FX][F[-X][X]F[-X]+FX]FF[-F[-X][X]F[-X]+FX]+FFF[-X][X]F[-X]+FX]+FFFFFF[-F[-X][X]F[-X]+FX][F[-X][X]F[-X]+FX]FF[-F[-X][X]F[-X]+FX]+FFF[-X][X]F[-X]+FX</span><br></pre></td></tr></table></figure><p>After only four generations, this system already looks pretty complex! We can see a sequence of F characters collecting at the beginning of the state string. Those characters represent the initial trunk or stem of our plant. In each generation, the trunk gets twice as long because of our production <code>F</code>→<code>FF</code>.</p><p>We can also see that the output of the production rule <code>X</code>→<code>F[−X][X]F[−X]+FX</code> is going to produce complex strings inside each set of square brackets. Each time we see <code>[X]</code> or <code>[-X]</code> in subsequent generations, we will end up substituting the output of the rule again between the square brackets. These parenthetical asides will represent the branches coming off the trunk of our tree, and each will grow fractally more complex in subsequent generations. We’ll soon see how to translate them into pictures, but first, let’s write some code to run the production rules automatically.</p><h2 id="Writing-the-L-system-in-code"><a href="#Writing-the-L-system-in-code" class="headerlink" title="Writing the L-system in code"></a>Writing the L-system in code</h2><p>It’s perfectly possible to run the production rules of the L-system with pen and paper, but computers are really good at storing and manipulating strings, so we should have no trouble expressing L-systems in code!</p><p>Let’s set up a simple JavaScript file to model our tree fractal. We will start by declaring the axiom and production rules:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = &#123;</span><br><span class="line">  <span class="attr">axiom</span>: <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="attr">X</span>: <span class="string">&#x27;F[-X][X]F[-X]+FX&#x27;</span>,</span><br><span class="line">    <span class="attr">F</span>: <span class="string">&#x27;FF&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we represent the production rules with a simple JavaScript object, where each key is the input symbol for the production, and each value is the output string for that production. We don’t need to list the vocabulary explicitly, so we have fully defined our system.</p><p>Now, we need a way to run the production rules. Here’s a function to apply a single rule:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyRule</span>(<span class="params">rules, char</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> rules[char] || char;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Given the rules and a character in the current system state, <code>applyRule</code> returns the output of the rule if there is one, or the original character if there is no rule for it. Now, to get from one generation to the next, we just apply rules for every character in the current state, called <code>previousGeneration</code> below:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderAGeneration</span>(<span class="params">system, previousGeneration</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nextGeneration = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> character <span class="keyword">of</span> previousGeneration) &#123;</span><br><span class="line">    nextGeneration += applyRule(system.rules, character);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nextGeneration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Try-it-out"><a href="#Try-it-out" class="headerlink" title="Try it out!"></a>Try it out!</h3><p>Putting it all together, we have a way to simulate the L-system. Check out the “Result” tab in this JSFiddle to see the L-system evolve through several generations. If you “Edit in JSFiddle”, you can tweak <code>numIters</code> to change how many generations the script simulates.</p><iframe width="100%" height="500" src="//jsfiddle.net/p35tpehv/17/embedded/" allowpaymentrequest allowfullscreen="allowfullscreen" frameborder="0"></iframe><h2 id="Drawing-the-fractal"><a href="#Drawing-the-fractal" class="headerlink" title="Drawing the fractal"></a>Drawing the fractal</h2><p>Now we have an L-system to model our plant, but the raw strings don’t look much like a tree. To draw a fractal from the strings, we need to map each symbol to a drawing rule.</p><h3 id="Defining-the-drawing-rules"><a href="#Defining-the-drawing-rules" class="headerlink" title="Defining the drawing rules"></a>Defining the drawing rules</h3><p>We’ll use an HTML canvas with <code>p5.js</code> to handle the drawing. It’s possible to draw on a canvas without using a library, but p5 will make this a lot easier.</p><p>We’ll need to get a little bit of setup out of the way, to create a canvas and configure p5:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createCanvas(CANVAS_BOUNDS.x, CANVAS_BOUNDS.y);</span><br><span class="line">  angleMode(DEGREES);</span><br><span class="line">  noLoop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we need to map the symbols in the vocabulary of our L-system to functions that draw on the canvas. Let’s add a new property, <code>commands</code>, to our system, to hold drawing functions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">angle</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">axiom</span>: <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="attr">X</span>: <span class="string">&#x27;F[-X][X]F[-X]+FX&#x27;</span>,</span><br><span class="line">    <span class="attr">F</span>: <span class="string">&#x27;FF&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">commands</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>: drawForward,</span><br><span class="line">    <span class="string">&#x27;-&#x27;</span>(drawingState, params) &#123;</span><br><span class="line">      drawingState.state.direction -= params.angle;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>(drawingState, params) &#123;</span><br><span class="line">      drawingState.state.direction += params.angle;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;[&#x27;</span>(drawingState, params) &#123;</span><br><span class="line">      drawingState.push();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;]&#x27;</span>(drawingState, params) &#123;</span><br><span class="line">      drawingState.pop();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each command is a function. Its name corresponds to a symbol in the system state string. When we encounter the symbol, we run the function. For example, for every <code>F</code> we see in the L-system’s state, we will call <code>drawForward</code> (not yet defined) to draw a line straight forward. We’ve also added a few other concepts:</p><ul><li>We have some drawing parameters for our system in <code>params</code>. We can add arbitrary configuration values here and then use them in our drawing functions. In this case, we configure the angle of the tree’s branches, and the length of each straight segment corresponding to an <code>F</code>.</li><li>We give each drawing function access to the drawing <code>params</code>, and to a <code>drawingState</code>, which tracks the current drawing position and direction, and maintains a stack. We can push the position and direction of the drawing context to the stack, then later pop them to restore them as the current drawing state.</li></ul><p>If you’ve used Logo’s turtle graphics, this drawing style should feel familiar. We will imagine a pen that drags across the canvas, and when we pop a position off the stack of the <code>drawingState</code>, we jump to the new location without drawing as though we lifted the pen.</p><p>Now we just need to call our drawing functions within <code>renderAGeneration</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderAGeneration</span> (<span class="params">system, previousGeneration, drawingState, draw=<span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nextGeneration = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> character <span class="keyword">of</span> previousGeneration) &#123;</span><br><span class="line">    <span class="keyword">const</span> nextCharacters = applyRule(system.rules, character);</span><br><span class="line">    nextGeneration += nextCharacters;</span><br><span class="line">    <span class="keyword">if</span> (draw) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> character <span class="keyword">of</span> nextCharacters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (system.commands[character]) &#123;</span><br><span class="line">         system.commands[character](drawingState, system.params);</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nextGeneration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each time we apply a rule to one character in the <code>previousGeneration</code>, we get a string of one or more characters in <code>nextCharacters</code>, which we append to the string we’re building to represent the next generation of the L-system. For each of those characters, we look for a drawing function and call it if it exists. We also have a new boolean argument, <code>draw</code>, which signals whether we should in fact draw something to the canvas. We’ll use it below.</p><p>We’re going to render the fractals when the user clicks the mouse. p5 comes out of the box with a mouse-click listener, so we just need to wrap our previous loop in a <code>mouseClicked</code> function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">numIters = <span class="number">4</span>;</span><br><span class="line">system = tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseClicked</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> origin = <span class="keyword">new</span> Point(mouseX, mouseY);</span><br><span class="line">  <span class="keyword">let</span> systemState = system.axiom;</span><br><span class="line">  <span class="built_in">console</span>.log(systemState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; numIters; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> drawingState = <span class="keyword">new</span> DrawingState(origin, -<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">const</span> shouldDraw = i === numIters - <span class="number">1</span>;</span><br><span class="line">    systemState = renderAGeneration(system, systemState, drawingState, shouldDraw);</span><br><span class="line">    <span class="built_in">console</span>.log(systemState);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When the user clicks the canvas, we store the location of their click as the origin of the new drawing. We initialize system state to the axiom (<code>X</code>), and then iterate through <code>numIters</code> generations of the L-system. After each iteration, <code>systemState</code> contains the new, more complex description of the fractal.</p><p>We wait to draw the fractal until it’s fully formed. The boolean <code>shouldDraw</code> becomes true on the final iteration of the loop, signaling that <code>renderAGeneration</code> should draw to the canvas.</p><h3 id="Try-it-out-1"><a href="#Try-it-out-1" class="headerlink" title="Try it out!"></a>Try it out!</h3><p>You can play with the result in the “Result” tab below. Try clicking on the blank canvas!</p><iframe width="100%" height="500" src="//jsfiddle.net/msmoLw7t/24/embedded/" allowpaymentrequest allowfullscreen="allowfullscreen" frameborder="0"></iframe><p>Now we’re drawing the fractal to the canvas, but we’re drawing the whole thing at once instead of gradually enhancing the drawing as we compute the new state of the L-system:</p><div style='position:relative;padding-bottom:77%'><iframe src='https://gfycat.com/ifr/AssuredKnobbyDonkey' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div><p>The fractals look right, but they need more animation!</p><p>Let’s animate the drawing to make it more fun to watch. We’ll use ES6 generators to do it.</p><h2 id="Animating-the-fractals"><a href="#Animating-the-fractals" class="headerlink" title="Animating the fractals"></a>Animating the fractals</h2><p>So far, we have used synchronous code to generate our fractal descriptions and render them to the canvas. From the time the user clicks the mouse, triggering the <code>mouseClicked</code> function, until the <code>mouseClicked</code> function finishes running all of the functions it calls and returns, our code never yields the main thread of the browser’s JavaScript engine. Meanwhile, there is no way for the browser to update the drawing we see on the canvas!</p><p>To get the intermediate steps of the drawing to show up on the canvas, we need to design our code to yield the JavaScript thread to other code the browser is trying to run.</p><p>We will do two things to restructure our code:</p><ol><li>First, we will create a generator to yield intermediate fragments of the fractal as we create them</li><li>Second, we will use <code>requestAnimationFrame</code> to draw each fragment</li></ol><h3 id="Using-a-generator-to-yield-intermediate-fragments"><a href="#Using-a-generator-to-yield-intermediate-fragments" class="headerlink" title="Using a generator to yield intermediate fragments"></a>Using a generator to yield intermediate fragments</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">Generators</a> are a new feature in JavaScript as of ES6. If you’ve used coroutines in other languages, they should feel familiar to you. MDN describes generators like this:</p><blockquote><p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances. […]</p><p>Calling a generator function does not execute its body immediately; an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator">iterator</a> object for the function is returned instead. When the iterator’s next() method is called, the generator function’s body is executed until the first <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield"><code>yield</code></a> expression, which specifies the value to be returned from the iterator […] (from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">MDN</a>)</p></blockquote><p>To create a generator, we declare a generator function, which returns an iterator. We can call <code>next()</code> on the iterator repeatedly to get its values.</p><p>Let’s create a generator function that takes an L-system and its current state and produces an iterator for the L-system’s next state string:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">fragmentGenerator</span>(<span class="params">system, string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> string) &#123;</span><br><span class="line">    <span class="keyword">yield</span> applyRule(system.rules, char);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We iterate through the characters of the string like before, but this time, instead of calling the corresponding drawing functions inside the loop, we <code>yield</code> the fragment of characters that results from applying the rule.</p><p>To consume the generated fragments of the system state, first we invoke the generator function to get an iterator. Then, we call <code>next()</code> on the iterator repeatedly, checking whether it is <code>done</code> after each call:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an iterator from our generator function</span></span><br><span class="line"><span class="keyword">const</span> fragmentIterator = fragmentGenerator(system, systemState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter;</span><br><span class="line"><span class="keyword">while</span> (iter = fragmentIterator.next(), !iter.done) &#123;</span><br><span class="line">  <span class="keyword">const</span> fragment = iter.value;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> character <span class="keyword">of</span> fragment) &#123;</span><br><span class="line">    <span class="comment">// draw characters like before</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using a generator for the fragments allows us to observe the progress of applying each rule from the outside, in this case from our while loop. We’re on to something powerful, but so far, the effect is not different from what we had before.</p><p>We’re still looping through all of the fragments synchronously; we’ve just moved the synchronous iteration to a <code>while</code> loop. For the final step, we will stop iterating in a loop at all and use <code>requestAnimationFrame</code> instead.</p><h3 id="Rendering-with-requestAnimationFrame"><a href="#Rendering-with-requestAnimationFrame" class="headerlink" title="Rendering with requestAnimationFrame"></a>Rendering with requestAnimationFrame</h3><p>Instead of rendering the fractal within a loop, we need a way to render a frame, then yield the thread, then render another frame, yield the thread, and so on, giving the browser a chance to update the canvas each time our code stops running.</p><p>Our strategy will be to write a new function, <code>drawFrame</code>, responsible for drawing just one frame of the animation. <code>drawFrame</code> will make its changes to the canvas quickly, then return, allowing the browser to update the image of the canvas.</p><p>We won’t invoke <code>drawFrame</code> directly; instead, we will pass it as a callback to <code>requestAnimationFrame</code>, a function provided by the browser. The browser will call <code>drawFrame</code> when it’s time to update the canvas (usually about 60 times per second). After we draw each frame, we will request another call to <code>drawFrame</code> by calling <code>requestAnimationFrame</code> again.</p><p>Here’s the code to set it all up:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSystem</span>(<span class="params">system, fragmentIterator, drawingState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> drawFrame = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> iter = fragmentIterator.next();</span><br><span class="line">    <span class="keyword">if</span> (iter.done) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fragment = iter.value;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> character <span class="keyword">of</span> fragment) &#123;</span><br><span class="line">      <span class="keyword">const</span> drawingFunction = system.commands[character];</span><br><span class="line">      <span class="keyword">if</span> (drawingFunction) &#123;</span><br><span class="line">        drawingFunction(drawingState, system.params);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    requestAnimationFrame(drawFrame);</span><br><span class="line">  &#125;;</span><br><span class="line">  requestAnimationFrame(drawFrame);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We define <code>drawFrame</code> as a closure within <code>drawSystem</code> so it will have access to the variables describing our L-system.</p><p>The core of <code>drawFrame</code> is identical to the drawing code we’ve already seen. The big difference is that now, we iterate through the fragments of the L-system without using a loop! Between each run of <code>drawFrame</code>, none of our JavaScript functions is running, and the browser has a chance to update the canvas.</p><h3 id="Try-it-out-2"><a href="#Try-it-out-2" class="headerlink" title="Try it out!"></a>Try it out!</h3><p>Here’s the final code, showing everything we’ve covered working together to animate the fractals. Click on the canvas in the “Result” tab to kick off the animations, and try playing around with the parameters in JSFiddle! Have fun!</p><iframe width="100%" height="500" src="//jsfiddle.net/1x354b0o/26/embedded/" allowpaymentrequest allowfullscreen="allowfullscreen" frameborder="0"></iframe><p>Thanks for reading! If you enjoyed this post, you might also enjoy <a href="https://www.qualia.com/careers/#/engineering">working at Qualia</a>! See you next time 👋</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This article is from a recent engineering talk I gave at &lt;a href=&quot;https://www.qualia.com&quot;&gt;Qualia&lt;/a&gt;.&lt;/p&gt;
&lt;div style=&#39;position:relative;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Lazy image resizing in hexo-image-sizes v2</title>
    <link href="https://travisgeis.com/2018/04/23/lazy-image-resizing-in-hexo-image-sizes-v2/"/>
    <id>https://travisgeis.com/2018/04/23/lazy-image-resizing-in-hexo-image-sizes-v2/</id>
    <published>2018-04-24T02:18:43.000Z</published>
    <updated>2020-07-12T03:04:03.860Z</updated>
    
    <content type="html"><![CDATA[<p>I just released <a href="https://github.com/ottobonn/hexo-image-sizes">version 2 of<code>hexo-image-sizes</code></a>, whichrepresents a complete rewrite of the plugin. It finally supports lazy imageresizing. In this post, I will cover the high-level design ideas behind the newversion and some of the challenges in making it.</p><p>Check out my <a href="/2017/03/03/optimizing-image-sizes-in-hexo/">first post on it</a> formore background on the functionality.</p><h2 id="Lazy-image-resizing-with-imsize-tags"><a href="#Lazy-image-resizing-with-imsize-tags" class="headerlink" title="Lazy image resizing with imsize tags"></a>Lazy image resizing with imsize tags</h2><p><code>hexo-image-sizes</code> uses a special tag format for adding images to posts in Hexo.Users add an <code>imsize</code> tag to their post when they want to use an image with theplugin, and in the tag they can specify various details of the image includingits size profile, its alt text, its link target, and more.</p><p>Here’s an example use of <code>imsize</code> within a markdown post:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% imsize %&#125;</span><br><span class="line">src: /uploads/2010/06/ArduinoDuemilanove.jpeg</span><br><span class="line">alt: Arduino Duemilanove</span><br><span class="line">profile: body</span><br><span class="line">&#123;% endimsize %&#125;</span><br></pre></td></tr></table></figure><p>When Hexo renders a post containing an <code>imsize</code> tag, it invokes the tag’sregistered function. The tag function has access to the user’s arguments andsome context information including the current page on which it appears, whichwill be important for resolving filenames.</p><p>The <code>imsize</code> tag affords the plugin a special ability. Because users must invokethe tag when they want to embed a resized image in their post,<code>hexo-image-sizes</code> can monitor exactly which images the user has actually madevisible in his or her posts. The new version of the plugin exploits this fact toavoid resizing images that the user never makes visible on the site.</p><p>The plugin’s operation now comprises two distinct phases during static sitegeneration:</p><!-- TODO could this have a diagram? --><ol><li>First, while Hexo renders each post on the site, the plugin monitors all the<code>imsize</code> tags the user includes in posts. Each time the user includes an<code>imsize</code> tag, the plugin records which image the user included and the desirednew size in a cache in memory.</li><li>After Hexo has processed all of the posts in the site, the plugin knowswhich images the user wants to make visible. It generates resized versions ofeach visible image.</li></ol><h2 id="Using-Hexo’s-router-to-avoid-filesystem-manipulation"><a href="#Using-Hexo’s-router-to-avoid-filesystem-manipulation" class="headerlink" title="Using Hexo’s router to avoid filesystem manipulation"></a>Using Hexo’s router to avoid filesystem manipulation</h2><p>Hexo has a router module responsible for tracking which files are in use on thesite and what their contents should be. The router is a map from the path ofthe file (relative to the Hexo site’s public output directory) to a streamof the contents of the file.</p><p>The documentation for the router is missing some important details. First, it’svery important to know that each route corresponds to a a file in the publicdirectory and not in the source directory. Therefore, if you add a route, youwill add a file to the public site but not alter the source directory. When Ifirst began work on this plugin, I assumed that the routes referenced files inthe source directory. I learned about using the router from a similar plugin,<a href="https://github.com/hexojs/hexo-filter-responsive-images">hexo-filter-responsive-images</a>.</p><p>Using the router to add new resized images to the public output of the sitegenerator has several advantages. By getting each file’s contents from the routestream managed by the router, my plugin can start to cooperate with otherasset-management plugins, like image filters and minifiers. Using the routeralso allows me to remove the hacky filesystem code I was using before, whereI had to guess the output location of each file and create the directorystructure there.</p><p>Using the router also has a downside. I’m using<a href="https://github.com/lovell/sharp">sharp</a> to resize the images, and it takes asinput either a file or a Buffer of image data, while the router provides astream for each file. To run the image through <code>sharp</code>, I have to read the fullfile stream into memory (in a Buffer), which adds a lot to the memory use of theplugin. In its original form, the plugin would invoke sharp with file pointersinstead of file contents, which meant that only <code>sharp</code> would need to see thefull contents of the image, outside of the JavaScript VM. For my site, theincreased memory use has not been an issue.</p><h2 id="Keeping-Hexo-running-until-all-images-are-resized"><a href="#Keeping-Hexo-running-until-all-images-are-resized" class="headerlink" title="Keeping Hexo running until all images are resized"></a>Keeping Hexo running until all images are resized</h2><p>I discovered that running Hexo in server mode with <code>hexo server</code> can behavedifferently than running it to generate files and quit with <code>hexo generate</code>. Mysite would generate without issue when running the server, but <code>hexo generate</code>would only produce a few of the necessary images.</p><p>The problem was with my <code>after_generate</code> filter function. Hexo uses the returnvalue of filters to determine when they are finished running, and my filterwasn’t returning anything. When Hexo was running in server mode, it would keeprunning indefinitely, long enough to allow my plugin to finish resizingeverything. In generate mode, it would exit as my plugin was just starting,because my filter function seemed to run synchronously.</p><p>To fix the issue, I simply return a Promise from the filter function. ThePromise resolves when every image has been resized.</p><h2 id="Normalizing-file-paths-throughout-the-application"><a href="#Normalizing-file-paths-throughout-the-application" class="headerlink" title="Normalizing file paths throughout the application"></a>Normalizing file paths throughout the application</h2><p>Hexo uses several different types of file path, and mixing them was hinderingmy development of the plugin for a while. The following paths are involved inresizing an image:</p><ul><li>The path the user put in the <code>imsize</code> tag, which could be:<ul><li>Absolute (with a leading slash), meaning it references the Hexo sourcedirectory</li><li>Relative (no leading slash), meaning it is relative to the current post:<ul><li>If the current post is a blog post and has an asset directory(<code>post_asset_folder</code>) is true  in Hexo config, then the path starts in theasset directory</li><li>If the current post is not a blog post or <code>post_asset_folder</code> is false,then the path starts in the directory of the post file.</li></ul></li></ul></li></ul><p>The plugin also has access to:</p><ul><li>The absolute path to Hexo’s source directory</li><li>The absolute path to the current post’s source file</li><li>The absolute path to the current post’s asset directory, if there is one</li></ul><p>The plugin computes:</p><ul><li>A relative path from Hexo’s source directory to the image the user wants toresize. For example, a cat picture might have path <code>/posts/2018-cats/cat1.jpg</code></li><li>A copy of that relative path with the image renamed to have its profile nameas a prefix. For example, a thumbnail-sized version of the above cat picturemight have path <code>/posts/2018-cats/thumbnail-cat1.jpg</code></li></ul><p>Once we know the Hexo-relative path to the input image and the output image,we have all the information necessary to resize the image.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just released &lt;a href=&quot;https://github.com/ottobonn/hexo-image-sizes&quot;&gt;version 2 of
&lt;code&gt;hexo-image-sizes&lt;/code&gt;&lt;/a&gt;, which
represents a
      
    
    </summary>
    
    
    
      <category term="javascript, hexo" scheme="https://travisgeis.com/tags/javascript-hexo/"/>
    
  </entry>
  
  <entry>
    <title>Debugging a Ticking Refrigerator</title>
    <link href="https://travisgeis.com/2017/11/19/debugging-a-ticking-refrigerator/"/>
    <id>https://travisgeis.com/2017/11/19/debugging-a-ticking-refrigerator/</id>
    <published>2017-11-20T04:44:29.000Z</published>
    <updated>2020-07-12T03:04:28.944Z</updated>
    
    <content type="html"><![CDATA[<p>Over the past few weeks, my refrigerator started making a rhythmic tickingsound, almost like the chugging of a toy train. My instinct was first to waitand see if it would solve itself. It kept getting louder.</p><p>Why had it changed? Soon, I had to know.</p><h2 id="Moving-parts"><a href="#Moving-parts" class="headerlink" title="Moving parts"></a>Moving parts</h2><p>To my knowledge, the refrigerator had only two moving parts: the compressor andthe evaporator fan in the freezer that circulates the cold air. I opened thefreezer to check on the fan; all good there. I concluded that it must be thecompressor, a worst-case scenario because the compressor is expensive andattached directly to the refrigerant lines throughout the fridge. It would be ahard sell to get the whole fridge replaced just because it was making noise.</p><p>My subconscious mulled it over for a week or so (this noise was really gettingto me). Something about it wasn’t like the compressor. For one, it was rhythmic,with a totally different period than the compressor noise. Second, I could swearI had heard the ticking sound in the middle of the night, when the compressorwasn’t running at all!</p><p>I decided to climb behind the fridge and check it out. Immediately, the sourceof the ticking revealed itself as a small white box near the compressor. Therewas hope after all for a cheap fix.</p><a href="/uploads/2017/11/19/junction-box-1.jpg"><img src="/uploads/2017/11/19/body-junction-box-1.jpg" alt="The junction box on a Frigidaire refrigerator"></a><h2 id="The-defrost-timer"><a href="#The-defrost-timer" class="headerlink" title="The defrost timer"></a>The defrost timer</h2><p>After some investigation online, I discovered that the ticking box was thedefrost timer, responsible for alternating power between the compressor, whichmanages cooling, and the defrost heater, which melts the ice that accumulatesin the freezer around the evaporator fan.</p><p>The defrost timer is a marvel of low-cost engineering that I want to take thispost to appreciate:</p><a href="/uploads/2017/11/19/junction-box-2.jpg"><img src="/uploads/2017/11/19/body-junction-box-2.jpg" alt="The inside of the junction box"></a><p>Inside the junction box, you can see the defrost timer. It’s a small synchronousAC motor connected to a plastic gearbox.</p><p>I opened up the gearbox to see if I could find the issue. Here’s the inside:</p><a href="/uploads/2017/11/19/defrost-timer-1.jpg"><img src="/uploads/2017/11/19/body-defrost-timer-1.jpg" alt="The insides of the defrost timer gearbox"></a><h3 id="The-gear-train"><a href="#The-gear-train" class="headerlink" title="The gear train"></a>The gear train</h3><p>The motor is on the back side of the box in this view, and powers it through asmall wheel hidden under the white faring the middle. To the right of thefaring, the brown wheel steps down the speed, and so on for the pink wheel towhich it connects.</p><p>Then, to get even lower speed, that first pink wheel has a form of <a href="https://en.wikipedia.org/wiki/Geneva_drive">genevawheel</a> to connect it to the next. Itadvances the second pink wheel by one tooth for each of its own rotations.Further reductions through the third pink and the gray wheel ultimately drivethe blue wheel through a second geneva mechanism.</p><p>The result is that the blue wheel, connected to the pink cam assembly under it,rotates about once every 24 hours. As you can see in the image, it influencesthe positions of the three electrodes entering from the connector on the right.</p><h3 id="Electrical-system"><a href="#Electrical-system" class="headerlink" title="Electrical system"></a>Electrical system</h3><a href="/uploads/2017/11/19/defrost-timer-2.jpg"><img src="/uploads/2017/11/19/body-defrost-timer-2.jpg" alt="The electrical connections inside the defrost timer"></a><p>The defrost timer doles out power to the compressor and defrost heater in turn.The center electrode is line in, connected to the hot terminal of the walloutlet through the thermostat inside the refrigerator cabinet, which acts  as asimple switch. The timer only gets power when the thermostat is closed.</p><p>The electrode on the right feeds out directly to the compressor circuit.</p><p>The electrode second from the left connects to the defrost heater.The defrost heater only runs when the freezer cabinet temperature is belowfreezing.</p><p>The central pink cam alternately connects the center lead to either of itsneighbors. For most of one revolution, the right two electrodes are shorted,meaning the compressor has the option to draw power through the thermostat.For a much smaller part of one revolution, the middle two electrodes areshorted, meaning the defrost heater has the option to draw power.</p><p>The lead on the left only connects to the motor… Interesting :)</p><h3 id="How-does-the-motor-get-its-power"><a href="#How-does-the-motor-get-its-power" class="headerlink" title="How does the motor get its power?"></a>How does the motor get its power?</h3><p>The thing that baffled me about this circuit is where the motor gets its power.Look closely at the terminals entering the box. The silver wires on the leftmostand rightmost drop down to power the motor. So, the motor must be connected tothe compressor power line, and to the mysterious leftmost terminal, which therefrigerator schematic confirms leads to the defrost heater’s thermostat:</p><a href="/uploads/2017/11/19/FFPT12F3MM0-schematic.png"><img src="/uploads/2017/11/19/body-FFPT12F3MM0-schematic.png" alt="The schematic of the refrigerator&#39;s wiring"></a><p>This schematic is pretty hard to follow, not least because of its “art style,”but props to Frigidaire for making it easy to find on <a href="http://b2b.frigidaire.com/support/manuals.asp">theirwebsite</a>.</p><p>Since I observed the timer motor running with the compressor and without it,I know it had to be powered even when the compressor is off. The motor getspower in two distinct ways:</p><ol><li>When the compressor is running, the thermostat is closed (connected), and thetimer connects line-level power coming in on lead 3 to the compressor via lead 4. In this mode, lead 2 (to the heater) is disconnected by the position of theswitch cam. From the schematic, we see that the motor’s only connection toneutral is through the heater! The motor’s impedance is so high compared to thatof the heater that it effectively drops all of the potential across it, andultimately sends a tiny current through the heater to neutral.</li><li>When the heater is running, the timer’s input lead 3 connects to the heaterthermostat on lead 2 by the position of the switch cam. Note that when thedefrost thermostat is closed (running the heater), the timer’s lead 1 isconnected to line voltage. Recall that one motor lead is always wired to thecompressor, so in this mode, the motor connects to neutral through the windingsof the compressor. Cool stuff.</li></ol><h3 id="Finding-the-right-frequency"><a href="#Finding-the-right-frequency" class="headerlink" title="Finding the right frequency"></a>Finding the right frequency</h3><p>I knew the ticking sound was relatively fast, and by the looks of the geartrain, most of these wheels would move too slowly to be the source of the noise.To make sure I understood the speeds involved, I hooked the timer up to powerand left the cover open. When the refrigerator started up, I got a nice video ofthe timer in action.</p><p><img src="/uploads/2017/11/19/timer.gif" alt=""></p><p>As I suspected, most of the wheels move <em>very</em> slowly, sothe noise likely came from the motor cog or the wheel connecting to it.Unfortunately, I couldn’t get a good photo of the motor because it’s hard-wiredto the leads of the timer box.</p><h3 id="Boxing-it-back-up"><a href="#Boxing-it-back-up" class="headerlink" title="Boxing it back up"></a>Boxing it back up</h3><p>I took care to re-seat all of the wheels and make sure they were clean. Thehigher-speed ones had some light oil on them from the factory that was stillmostly intact, so I didn’t add any lubricant.</p><p>I had a little scare when the compressor made some effort to start and then gaveup with a click. It turns out that the compressor can’t start when the outputline is pressurized, and its thermal overload protection was turning it off fortrying. After the pressure boiled off through the evaporator, everything startedup again, and the ticking sound was gone!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Over the past few weeks, my refrigerator started making a rhythmic ticking
sound, almost like the chugging of a toy train. My instinct wa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Sketchy: Drawing with a humanoid robot</title>
    <link href="https://travisgeis.com/2017/05/17/sketchy-drawing-with-a-humanoid-robot/"/>
    <id>https://travisgeis.com/2017/05/17/sketchy-drawing-with-a-humanoid-robot/</id>
    <published>2017-05-17T17:55:12.000Z</published>
    <updated>2020-07-12T03:05:08.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Drawing-with-a-humanoid-robot"><a href="#Drawing-with-a-humanoid-robot" class="headerlink" title="Drawing with a humanoid robot"></a>Drawing with a humanoid robot</h2><p>This quarter for Stanford’s CS225a, I’m working on “sketchy,” a project to draw pictures with a humanoid robot arm. We’re a group of four working with a Rethink Robotics Sawyer robot.</p><p>The end goal of the project is to have the robot “look” at something (via a camera) and draw a version of what it sees using markers. The project goal lends itself easily to a two-part structure:</p><ol><li>Capture images of the world and interpret them artistically to plan a drawing</li><li>Use the plan to draw the picture with an appropriate control system</li></ol><p>With a team of four, we can work most effectively if the project comprises smaller, independent and parallelizable tasks. Splitting the project into trajectory planning using the images of the world versus trajectory control using the output of the planner allows us to work on both parts simultaneously.</p><h2 id="Software-overview"><a href="#Software-overview" class="headerlink" title="Software overview"></a>Software overview</h2><p>Now for a bit of project architecture: this system isn’t terribly complex on the whole, but to make trajectory generation and trajectory control two independent development efforts, we need an intermediate representation or API that each half of the whole understands. Since we know what the drawing will look like before it starts, we can pregenerate the entire trajectory and save it to a file that the controller can load when it starts.</p><p>From the controls perspective, the task is to hold a marker and move it through the operational space at the correct position and orientation to draw a picture on the paper. At the very least, the position of the marker tip in 3D space matters, so the control task requires at least 3 degrees of freedom. We also want to avoid holding the marker upside-down, which means constraining another 2 degrees of freedom. The third degree of freedom for orientation controls the marker’s rotation about its central axis.</p><h2 id="Trajectory-specification"><a href="#Trajectory-specification" class="headerlink" title="Trajectory specification"></a>Trajectory specification</h2><p>Before dividing the development effort, the planning and controls teams need to know what intermediate format to target. The controller needs to understand what the path planner is saying. We want the planner to pregenerate the trajectory and save it to a file that the controller can load when it starts.</p><p>Specifying the format of this file also means deciding what matters for a drawing tool trajectory and what doesn’t. For example, does the speed of the marker matter? We might also want to control the angle and the pressure, for varying the stroke style. At the very least, we need control over the position of the marker on the paper.</p><p>For our first implementation (and likely our final one, because the quarter is so short) we assume that only the position of the marker matters. We also want to allow multiple colors of marker. So the trajectory file needs to encode the color of the marker and the positions on the page it should draw.</p><p>If you’ve worked with 3D printers or CNC tools, this spec probably sounds like the beginnings of GCODE, and it is. We could use GCODE for our trajectory. However, GCODE is complex and supports way more features than we need. It also has a bigger problem (for us): it tightly couples the planning software (traditionally, the CAM program) to the control software (the CNC machine). When it’s time to mill a part, first you must specify every detail of the CNC tools to the CAM software, and then it generates a 3D path by computing all the tool offsets, keepouts, tool changes, etc. On the one hand, the planner’s knowledge of the tool allows it to make arbitrary parts, which is great. The downside is that it takes a lot of extra configuration to specify all the machine parameters, and the trajectory specification starts to encode a lot of information.</p><p>We’re just drawing pictures. They’re two-dimensional, and all of the markers are the same shape. So, we can decouple the planner from the controller by pushing some of the complexity into the controller. Instead of the planner doing all the work, it will only decide a 2D path for each marker through a hypothetical rectangular image plane. It will use normalized device coordinates (NDC), which essentially just means that it has no knowledge of physical units. The bottom-left of the image is (0, 0) and the top-right is (1, 1), and every point in the image falls somewhere in between.</p><p>The controller will handle things not related to the image itself: it knows about physical units, the size of the paper, and the positions of the markers on the tool carousel. It knows how to change tools when the image specification calls for a new color. It also knows how to project 2D image coordinates (in NDC) to 3D space. This separation of the image specification from the controls allows us to scale the drawing, change the position of the paper, and redesign the end-effector without regenerating the trajectory plans.</p><h3 id="Trajectory-file-format"><a href="#Trajectory-file-format" class="headerlink" title="Trajectory file format"></a>Trajectory file format</h3><p>We still need a spcific format in which to store the trajectory information. We don’t want to invent a new format, and CS225a is already using <code>jsoncpp</code>, a C++ library for parsing <a href="json.org">JSON</a> files. JSON is nice because it can store arbitrary key/value pairs, nested in objects. It also supports arrays. Assuming we can encode the trajectory compactly enough, it would be a convenient format, and we get the parser for free (since we already use it in other code).</p><p>Imagining just one marker drawing one continuous line, a trajectory is a list of points. Remember that we only care about specifying the action in the image plane, so each point in the list is two-dimensional and each coordinate takes on values from 0 to 1. Let’s also add a way to specify the color of the marker, and call this a “tool path”.</p><p>To draw a picture, we just need a list of tool paths. When one ends and another begins, we’ll assume that the controller can handle moving away from the drawing and changing tools. To interrupt a line and start drawing somewhere else with the same color (i.e. to lift the marker temporarily), we can simply start a new tool path with the same color.</p><p>The result is a JSON trajectory file like the following:</p><pre><code>&#123;  &quot;sequence&quot;: [    &#123;      &quot;tool&quot;: 0,      &quot;points&quot;: [        [0, 0],        [1, 0],        [1, 1],        [0, 1],        [0, 0]      ]    &#125;,    &#123;      &quot;tool&quot;: 4,      &quot;points&quot;: [        [0.1, 0.1],        [0.9, 0.1],        [0.9, 0.9],        [0.1, 0.9],        [0.1, 0.1]      ]    &#125;  ]&#125;</code></pre><p>This file specifies two concentric squares, the first drawn using tool 0 and the second with tool 4. Specifying the tool by number raises a (small) red flag, because it means the planner still needs to know what tools the controller has in each position. For complete separation of concerns, the tool specifier should probably be the desired color instead of a tool number. However, the planner does need to know what colors are available anyway, so some cross-domain knowledge is appropriate here. We might change this interface as we finalize what colors the robot will use.</p><h2 id="Next-step-controls"><a href="#Next-step-controls" class="headerlink" title="Next step: controls"></a>Next step: controls</h2><p>In the next post, I’ll talk about the controls we’re using to realize these planned trajectories!</p><!-- ## Control laws[Picture of Sawyer]The task is to hold a marker and move it through the operational space at the correct position and orientation to draw a picture on the paper. The Sawyer arm has seven degrees of freedom, each a revolute joint. Some of the joints are connected by right-angle links, which apparently makes this arm a little harder to control than one with more regular joint intervals (though I haven't investigated the reasons that would be true). -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Drawing-with-a-humanoid-robot&quot;&gt;&lt;a href=&quot;#Drawing-with-a-humanoid-robot&quot; class=&quot;headerlink&quot; title=&quot;Drawing with a humanoid robot&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
      <category term="robotics" scheme="https://travisgeis.com/tags/robotics/"/>
    
  </entry>
  
  <entry>
    <title>Optimizing image sizes in Hexo</title>
    <link href="https://travisgeis.com/2017/03/03/optimizing-image-sizes-in-hexo/"/>
    <id>https://travisgeis.com/2017/03/03/optimizing-image-sizes-in-hexo/</id>
    <published>2017-03-03T22:24:26.000Z</published>
    <updated>2020-07-12T02:46:56.398Z</updated>
    
    <content type="html"><![CDATA[<p>I use Hexo to generate my site. It’s a static site generator, and it follows the typical paradigm of keeping posts (in Markdown format) in a <code>source</code> folder, along with images and other resources. The idea is to keep all the “originals” in the source directory, and then use the site generator to render them to their final display format, into an output directory.</p><p>The problem is that source images are large. I want to keep them in their original full resolutions, because I might want to target bigger displays or allow people to download them, and in general because I want the source directory to be a complete archive of the site’s content.</p><p>Instead of serving these huge images to the user, it would be better to make them as small as possible without degrading the experience of looking at them. How big they need to be depends on what they’re for. If they’re thumbnails in a gallery, for example, they should be really small files! A full-width banner image should obviously be larger. But none of these likely needs to be the original size, which is often on the order of 4 MB.</p><p>Dynamic CMSs like Wordpress already solve this problem, by serving images derived from the ones you upload, resized based on your theme’s settings. For a static site, putting out images with different viewing “profiles” should be just as easy, but I didn’t see a way to do that with Hexo, so I wrote a plugin.</p><h2 id="hexo-image-sizes"><a href="#hexo-image-sizes" class="headerlink" title="hexo-image-sizes"></a>hexo-image-sizes</h2><p>The <a href="https://github.com/ottobonn/hexo-image-sizes"><code>hexo-image-sizes</code> plugin</a>lets you define image profiles, which specify the optimal size for the image, and then it takes care of generating the images for you. Each source image is then available for use in the original format and in the format of each of the profiles.</p><p>You can read about how to use it <a href="https://github.com/ottobonn/hexo-image-sizes">on Github</a>. I’m not going to cover that here; instead, I’d like to discuss some of the design decisions involved in making it.</p><h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><h3 id="The-Hexo-API"><a href="#The-Hexo-API" class="headerlink" title="The Hexo API"></a>The Hexo API</h3><p><code>hexo-image-sizes</code> is a Hexo plugin, which means it uses the <a href="https://hexo.io/api/">Hexo API</a> to interact with your site’s files. Hexo has a pretty flexible API, though the documentation is a little too terse for comfort sometimes.</p><p>The plugin API revolves around these core concepts:</p><ul><li>Plugins are <code>npm</code> modules whose names start with <code>&quot;hexo-&quot;</code></li><li>Hexo loads plugins automatically at start and provides them with the <code>hexo</code> global instance object, which includes your site information</li><li>Text files and (and anything else that registers) are “rendered” through renderer functions which receive the file data and return its rendered form</li><li>Other files, like images, get copied directly to the output directory</li><li>Plugins can register <code>processor</code> functions to listen for filenames matching a certain pattern and do things with the filenames</li></ul><h3 id="Renderer"><a href="#Renderer" class="headerlink" title="Renderer?"></a>Renderer?</h3><p>My first attempt was to make a renderer for the images, to intercept them in the pipeline and resize them. There are two problems here.</p><p>The first problem is that renderers are designed to transform the input file into some other, final format, and they can’t control the name of the output, or how many outputs there should be. So if we want to create multiple different sizes of one source image, a renderer isn’t the way to go.</p><p>The other problem is that we don’t really want to read the image data into Javascript-land. The image files can be huge, and Hexo loads asynchronously and seemingly without any throttling all the files for which renderers have registered, so the memory penalty of loading all images in order to render them is not acceptable.</p><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor!"></a>Processor!</h3><p>Instead, we want to keep the image handling as low-level as possible. The awesome <a href="https://github.com/lovell/sharp"><code>sharp</code></a> module uses a native-compiled <a href="http://www.vips.ecs.soton.ac.uk/index.php?title=VIPS"><code>libvips</code></a> under the hood to handle images, so the memory overhead should be much lower if we can just pass <code>sharp</code> the name of an input file and the path to which to write the resized image.</p><p>The “processor” abstraction in Hexo gives us visibility into the stream of files Hexo is processing for the site. Each processor is simply a function, and it is invoked with a Hexo <code>File</code> object as its only argument. The important keys in this object are the “type” and “source”.</p><ul><li>The file <code>type</code> indicates what Hexo is doing with it. It’s one of these strings: <code>&quot;create&quot;</code>, <code>&quot;update&quot;</code>, <code>&quot;skip&quot;</code>, <code>&quot;delete&quot;</code> (as seen in <a href="https://github.com/hexojs/hexo/blob/5234c4a85dc6cd418e9a1c169e43de169cf98e95/lib/box/file.js#L33-L36">the source code</a>; this is an example of where the docs are lacking). For now, I only look at files that we’re creating or updating, but in the future I should probably handle deleting files as well.</li><li>The <code>source</code> contains the file’s full path on disk.</li></ul><p>Now we simply need to tell <code>sharp</code> this file’s <code>source</code> and where towrite the output.</p><h3 id="Wither-output"><a href="#Wither-output" class="headerlink" title="Wither output?"></a>Wither output?</h3><p>So here’s the ugly hack of using a processor for generating these images: we receive information about the input file, but we have to <em>guess</em> the name of the output file. From what I can tell, Hexo simply uses the <code>public_dir</code> configured in <code>_config.yml</code> as the base path, and then tacks on the path of the input file relative to the <code>source</code> directory. However, that could change, and my plugin wouldn’t work anymore.</p><p>I name the output files based on the original filename and the name of the current profile. So if we have a profile called “thumbnail”, then an image called “cat.jpg” will end up in the output directory at full size as “cat.jpg” and as a thumbnail at “thumbnail-cat.jpg”.</p><p>There’s one more complication, which is that the plugin will run when Hexo starts up. Unfortunately, that means we’re running ahead of the renderers, and it could be that none of the output directory structure exists yet. After deciding on the full output path, we have to make sure that path exists. I’m using <code>mkdirp</code> to create a directory with all of its intermediate ancestors if it doesn’t already exist.</p><h3 id="Using-the-images"><a href="#Using-the-images" class="headerlink" title="Using the images"></a>Using the images</h3><p>So we’ve resized the images, and now the output directory contains a copy of the original and potentially several resized copies with various names. We could just use one of these new filenames in our Markdown posts directly, but that situation is brittle, because changing the names of profiles could cause images not to show up at all.</p><p>While we’re messing with the images, it’s a good time to note that Markdown doesn’t have a mechanism for captioning images, besides repeating some HTML snippet for each one. This too is brittle, and mixes elements of the site’s theme into the source posts, which is not what we want.</p><p>Unfortunately (or maybe fortunately, depending on your bent), Markdown doesn’t have an official means of extension, so I can’t build support for captions and image profiles directly. Hexo allows Nunjucks tags in posts through its <a href="https://hexo.io/api/tag.html">Tag API</a>, which is the next best option. The upside is that we get a lot more options for controlling the output now, but the tradeoff is that we’re no longer writing standard Markdown, and our posts depend on this plugin now. I considered this trade for a few days, and decided this was the best course, but it was a tough call.</p><h3 id="The-imsize-tag"><a href="#The-imsize-tag" class="headerlink" title="The imsize tag"></a>The <code>imsize</code> tag</h3><p>I wanted a tag that is as self-documenting as possible, so if this plugin dies or the posts need to migrate to a different platform, it will be as easy as possible to support these image tags.</p><p>There are two choices for passing data to Nunjucks tags: “args” and “content.” A tag looks like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all.</span><br><span class="line">Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><ul><li><code>args</code> is an array formed from the string passed in the tag line. Here, it is [“David”, “Levithan,”, “Wide”, “Awake”]. Hexo parses the arg line <a href="https://github.com/hexojs/hexo/blob/5234c4a85dc6cd418e9a1c169e43de169cf98e95/lib/extend/tag.js#L86-L113">here</a>.</li><li><code>content</code> is the string between the opening and closing tags.</li></ul><p>Given that I want self-documenting tags, I’m not too worried about brevity.Copy-and-paste is pretty easy, and authors can set up editor shortcuts to insert these tags if needed.</p><p>Passing arguments through the arg line becomes unreadable for more than even a few arguments. The spec for that blockquote tag is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br></pre></td></tr></table></figure><p>These are all positional arguments, and any of them can be elided! Handing that is not easy, and it doesn’t scale nor is it self-explanatory later.</p><p>Instead, I decided to embed a <a href="http://yaml.org/start.html">YAML</a> document in the tag’s content. YAML is very easy to read, and I don’t have to write a parser for it. By using a YAML document in the tag content, I can add more arguments in the future without breaking existing documents.</p><p>Tags look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% imsize %&#125;</span><br><span class="line">src: /uploads/2017/01/05/5510-repair.jpg</span><br><span class="line">alt: Dell Precision 5510 repair</span><br><span class="line">profile: thumbnail</span><br><span class="line">&#123;% endimsize %&#125;</span><br></pre></td></tr></table></figure><p>We can specify the <code>src</code> and <code>profile</code>, and alt text. In the future, we could add a caption, and potentially even an output format (.webp, for example). I’d like to add those possibilities soon.</p><p>Since this is normal YAML, other people can write parsers for this tag for their blogging platforms if needed. It’s a little wordy, but I think it’s very clear.</p><p>There’s more to come on this project, hopefully soon! I’m already using this plugin to generate the images on this site. Head over to the <a href="https://github.com/ottobonn/hexo-image-sizes">Github repo</a> to try it out!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I use Hexo to generate my site. It’s a static site generator, and it follows the typical paradigm of keeping posts (in Markdown format) i
      
    
    </summary>
    
    
    
      <category term="node, hexo, image-processing" scheme="https://travisgeis.com/tags/node-hexo-image-processing/"/>
    
  </entry>
  
  <entry>
    <title>Flounder: An RL Chess Agent</title>
    <link href="https://travisgeis.com/2017/01/06/flounder/"/>
    <id>https://travisgeis.com/2017/01/06/flounder/</id>
    <published>2017-01-06T22:54:36.000Z</published>
    <updated>2020-07-12T03:11:00.602Z</updated>
    
    <content type="html"><![CDATA[<p>For CS221 last quarter, my team wrote a chess engine based on reinforcement learning. I’m posting our paper and poster here for my records. This-playing program isn’t just extraordinarily slow—it’s also absolutely horrible at the game!</p><p>See the <a href="/uploads/2017/01/06/Flounder.pdf">full report</a> and<a href="/uploads/2017/01/06/FlounderPoster.pdf">poster</a>.</p><p>Note to self: leave a <em>lot</em> more time at the end to train the model, because it takes a very, very long time.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For CS221 last quarter, my team wrote a chess engine based on reinforcement learning. I’m posting our paper and poster here for my record
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Thoughts on the Dell Precision m5510</title>
    <link href="https://travisgeis.com/2017/01/01/dell-precision/"/>
    <id>https://travisgeis.com/2017/01/01/dell-precision/</id>
    <published>2017-01-02T01:52:41.000Z</published>
    <updated>2020-07-12T03:09:52.810Z</updated>
    
    <content type="html"><![CDATA[<p>I just upgraded my Thinkpad T420 to a new Dell Precision m5510, the 15-inchDeveloper Edition laptop. In one word, it’s <em>awesome</em>. It ships with Ubuntuinstalled by default and Dell has done great work getting the support for thishardware into the mainline Linux kernel.</p><p>I got the 5510 with the following options:</p><ul><li>Core i5-6300HQ @ 2.3 GHz</li><li>16 GB RAM</li><li>1920x1080 matte display</li><li>1TB NVMe M.2 SSD</li><li>84 Wh battery</li></ul><p>Originally, I was aiming to migrate my 2.5” SSD from the T420 to the 5510, butI noticed that I could omit the 2.5” drive and fill the drive bay with a largerbattery. Battery life is one of my top priorities, so I opted for the 84 Whbattery (up from 54 Wh) and bought the NVMe SSD. The NVMe SSD is super fast!</p><p>Of course, I can’t just start using the laptop without making some tweaks :)Here’s what I did to get the software all set up.</p><h2 id="1-Install-Linux-Mint"><a href="#1-Install-Linux-Mint" class="headerlink" title="1. Install Linux Mint"></a>1. Install Linux Mint</h2><p>The system ships with Ubuntu, but I prefer Linux Mint, so my first step wasto install Mint. I’m running Mint 18.1 with Cinnamon, kernel 4.4.0-57-generic.</p><h2 id="2-Set-up-graphics"><a href="#2-Set-up-graphics" class="headerlink" title="2. Set up graphics"></a>2. Set up graphics</h2><p>The 5510 comes with an Nivida Quadro M1000M connected to the CPU with Optimus.The T420 also shipped with Optimus. Fortunately, configuring the graphics isway easier than it used to be!</p><p>This step was super easy: I opened the driver manager and installed<code>nvidia-367</code>. The manager also installs <code>nvidia-prime</code>.  After a reboot,Optimus is working flawlessly. I can toggle between nvidia and intel GPUs andthe graphics are stable and the backlight works. Excellent!</p><p>I see a little bit of tearing when I scroll, for example in web browsers. I’vehad tearing before, and I’m not yet sure what causes it here, but it’s minorand fixing it isn’t my top priority right now.</p><h2 id="3-Adjust-the-touchpad"><a href="#3-Adjust-the-touchpad" class="headerlink" title="3. Adjust the touchpad"></a>3. Adjust the touchpad</h2><p>At this point, things are working great. So far, this is the easiest Linux setupI’ve had. However, this laptop has a larger touchpad than does the T420, largeenough that my hands touch it while I type.</p><p>The Dell developers brought us the <code>designware</code> i2c driver for this touchpad,so it’s working better than it did when the 5510 first came out as the developeredition machine. It looks like the driver handles palm rejection, becauseadjusting palm rejection settings in <code>synclient</code> does not affect the touchpad,and <code>evtest</code> does not see palm touch events at all, which suggests that thedriver filters out palm touches.</p><p>However, palm rejection alone isn’t quite enough to keep out spurious touch events:when I type, my thumbs hit the top of the touchpad when I press the spacebar,and the base of my right thumb rests on the right edge of the trackpad. Tofilter out these touches, I disabled touch-to-click, and added a dead zone tothe top and right margins of the touchpad using <code>synclient</code>, the Synapticstouchpad driver configuration client.</p><h3 id="Disable-touch-to-click"><a href="#Disable-touch-to-click" class="headerlink" title="Disable touch-to-click"></a>Disable touch-to-click</h3><p>First, I simply disabled touch-to-click. The trackpad had a physical buttonunder it, and using this button alone to register clicks is already less proneto noise than using touches to click as well.</p><h3 id="Add-dead-zones"><a href="#Add-dead-zones" class="headerlink" title="Add dead zones"></a>Add dead zones</h3><p>The synaptics touchpad driver offers some customization options for thetrackpad.</p><h4 id="Disable-psmouse"><a href="#Disable-psmouse" class="headerlink" title="Disable psmouse"></a>Disable psmouse</h4><p>The <code>psmouse</code> kernel module interferes with the synaptics driver. I blacklistedit by adding the following line to <code>/etc/modprobe.d/blacklist.conf</code>:</p><pre><code>blacklist psmouse</code></pre><p>Then I ran <code>update-initramfs -u</code> to update the kernel image.</p><h4 id="Configure-the-synaptics-options"><a href="#Configure-the-synaptics-options" class="headerlink" title="Configure the synaptics options"></a>Configure the synaptics options</h4><p>The parameters of interest are <code>AreaRightEdge</code>, which controls the dead zone onthe right side, and <code>AreaTopEdge</code>, which controls the dead zone at the top. Notethat the trackpad is still active in these “dead zones,” but it will ignoretouches that start there. It only responds to touches that start out of the deadzone and cross into it.</p><p>To experiment with different options, run <code>synclient</code> and pass in one of theseat a time, like so:</p><pre><code>synclient AreaTopEdge=150</code></pre><p>You can monitor what coordinates your trackpad is seeing with <code>evtest</code>, whichdumps the raw input events. You’ll need the input device number of your trackpadto use <code>evtest</code>. Run <code>xinput</code> to get a list of input devices with their IDs:</p><pre><code>xinput⎡ Virtual core pointer                        id=2    [master pointer  (3)]⎜   ↳ Virtual core XTEST pointer                  id=4    [slave  pointer  (2)]⎜   ↳ DLL06E5:01 06CB:7A13 Touchpad               id=12    [slave  pointer  (2)]⎣ Virtual core keyboard                       id=3    [master keyboard (2)]↳ Virtual core XTEST keyboard                 id=5    [slave  keyboard (3)]↳ Power Button                                id=6    [slave  keyboard (3)]↳ Video Bus                                   id=7    [slave  keyboard (3)]↳ Video Bus                                   id=8    [slave  keyboard (3)]↳ Power Button                                id=9    [slave  keyboard (3)]↳ Sleep Button                                id=10    [slave  keyboard (3)]↳ Integrated_Webcam_HD                        id=11    [slave  keyboard (3)]↳ Intel HID events                            id=13    [slave  keyboard (3)]↳ AT Translated Set 2 keyboard                id=14    [slave  keyboard (3)]↳ Dell WMI hotkeys</code></pre><p>My dell touchpad is the <code>DLL06E5:01</code>, which is at <code>/dev/input/event15</code>. Run<code>evtest</code> on it to see the raw events:</p><pre><code>sudo evtest /dev/input/event15</code></pre><p>These raw events will give you an idea of the coordinates on the trackpad. OnceI found <code>synclient</code> parameters that I like, I had to make the changes persist.I created a <code>.xprofile</code> file in my home directory with the following synclientcommands:</p><pre><code>synclient AreaRightEdge=1000synclient AreaTopEdge=150</code></pre><p>There are lots of other <code>synclient</code> options to play with, but these two changesmake typing way better. Now I don’t get any trackpad interference while I type!</p><p>I noticed that <a href="https://samtinkers.wordpress.com/2016/06/13/3-finger-gestures-in-ubuntu-16-04/">there may be a way</a> to get more gesture support on thetrackpad, but I haven’t tried it yet.</p><h2 id="4-Disable-Bluetooth-LE-to-pair-with-Bose-QC-35"><a href="#4-Disable-Bluetooth-LE-to-pair-with-Bose-QC-35" class="headerlink" title="4. Disable Bluetooth LE to pair with Bose QC 35"></a>4. Disable Bluetooth LE to pair with Bose QC 35</h2><p>I was to use my new laptop with Bose QuietComfort 35 headphones, which useBluetooth LE (low energy) to pair with the host. Unfortunately, it looks likeLinux’s BlueZ doesn’t support that pairing strategy yet, so in order to pairthe QC 35s, I had to disable the BLE mode for my laptop’s Bluetooth adapter.</p><p>In <code>/etc/bluetooth/main.conf</code>, I changed</p><pre><code># ControllerMode = dual</code></pre><p>to</p><pre><code>ControllerMode = bredr</code></pre><p>Then I restarted bluetooth with <code>sudo service bluetooth restart</code>.</p><p>Thanks to Victor over <a href="https://askubuntu.com/questions/833322/pair-bose-quietcomfort-35-with-ubuntu-16-04-over-bluetooth">on AskUbuntu</a>for these steps.</p><h2 id="5-Fix-the-tearing"><a href="#5-Fix-the-tearing" class="headerlink" title="5. Fix the tearing"></a>5. Fix the tearing</h2><p>It took me some time to get around to working on the tearing issue. I usuallyuse the Intel graphics card, and Firefox was tearing badly on scroll and whenplaying video. I discovered an <a href="https://github.com/linuxmint/Cinnamon/issues/3423">issue on GitHub</a>relevant to my setup and tried what they recommend, which is to remove the<code>xserver-xorg-video-intel</code> package. Now the tearing is gone. There’s anotherpossible fix specific to Firefox, but as far as I’m concerned removing apackage to fix an issue is preferable unless I see stability orpower-consumption side effects.</p><h2 id="Stability"><a href="#Stability" class="headerlink" title="Stability"></a>Stability</h2><p>The new laptop is stable so far, except for a crash I experienced yesterday.The laptop froze and <code>dmesg</code> revealed that NVMe, the storage controller, hadan error. The system failed into read-only mode and I restarted it (luckily,I have a photo of the logs, because the drive became read-only).</p><p>I wanted to check the S.M.A.R.T. attributes for the drive, but  NVMe support fordisk-monitoring tools is relatively new in Linux, so I had to build <code>smartctl</code>from source, using the configuration option <code>--with-nvme-devicescan</code>. The outputshowed everything okay:</p><pre><code>sudo smartctl -x -d nvme /dev/nvme0smartctl 6.5 2016-05-07 r4318 [x86_64-linux-4.4.0-57-generic] (local build)Copyright (C) 2002-16, Bruce Allen, Christian Franke, www.smartmontools.org=== START OF INFORMATION SECTION ===Model Number:                       THNSN51T02DUK NVMe TOSHIBA 1024GBSerial Number:                      966S10FGT1BTFirmware Version:                   5KDA4101PCI Vendor/Subsystem ID:            0x1179IEEE OUI Identifier:                0x00080dController ID:                      0Number of Namespaces:               1Namespace 1 Size/Capacity:          1,024,209,543,168 [1.02 TB]Namespace 1 Formatted LBA Size:     512Local Time is:                      Sun Jan  1 17:46:20 2017 ESTFirmware Updates (0x02):            1 SlotOptional Admin Commands (0x0017):   Security Format Frmw_DL *Other*Optional NVM Commands (0x001e):     Wr_Unc DS_Mngmt Wr_Zero Sav/Sel_FeatWarning  Comp. Temp. Threshold:     78 CelsiusCritical Comp. Temp. Threshold:     82 CelsiusSupported Power StatesSt Op     Max   Active     Idle   RL RT WL WT  Ent_Lat  Ex_Lat0 +     6.00W       -        -    0  0  0  0        0       01 +     2.40W       -        -    1  1  1  1        0       02 +     1.90W       -        -    2  2  2  2        0       03 -   0.0120W       -        -    3  3  3  3     5000   250004 -   0.0060W       -        -    4  4  4  4   100000   80000Supported LBA Sizes (NSID 0x1)Id Fmt  Data  Metadt  Rel_Perf0 +     512       0         21 -    4096       0         1=== START OF SMART DATA SECTION ===SMART overall-health self-assessment test result: PASSEDSMART/Health Information (NVMe Log 0x02, NSID 0xffffffff)Critical Warning:                   0x00Temperature:                        36 CelsiusAvailable Spare:                    100%Available Spare Threshold:          50%Percentage Used:                    0%Data Units Read:                    172,363 [88.2 GB]Data Units Written:                 579,378 [296 GB]Host Read Commands:                 3,566,794Host Write Commands:                10,514,861Controller Busy Time:               16Power Cycles:                       60Power On Hours:                     38Unsafe Shutdowns:                   19Media and Data Integrity Errors:    0Error Information Log Entries:      0Warning  Comp. Temperature Time:    0Critical Comp. Temperature Time:    0Temperature Sensor 1:               36 CelsiusError Information (NVMe Log 0x01, max 128 entries)No Errors Logged</code></pre><p>We’ll see how the drive holds up; hopefully this error was a minor softwareissue and not a hardware fault.</p><h3 id="Update-5-Jan-2017"><a href="#Update-5-Jan-2017" class="headerlink" title="Update 5 Jan 2017"></a>Update 5 Jan 2017</h3><p>The NVMe crash returned once a day for a total of three crashes. I contactedDell support and they were incredibly responsive. The technician came to myhouse the next day and replaced the SSD and motherboard on my laptop. So far,so good. Ideally, there would be no problem to begin with, but the service hasbeen a great experience.</p><a href="/uploads/2017/01/05/5510-repair.jpg"><img src="/uploads/2017/01/05/body-5510-repair.jpg" alt="Dell Precision 5510 repair"></a><a href="/uploads/2017/01/05/5510-internals.jpg"><img src="/uploads/2017/01/05/body-5510-internals.jpg" alt="Dell Precision 5510 internals"></a><p>The new SSD is a made by Lite-on instead of Toshiba. The motherboard isindistinguishable from the old one, and it comes with a new CPU and GPU.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just upgraded my Thinkpad T420 to a new Dell Precision m5510, the 15-inch
Developer Edition laptop. In one word, it’s &lt;em&gt;awesome&lt;/em&gt;.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>New Site</title>
    <link href="https://travisgeis.com/2016/08/29/new-site/"/>
    <id>https://travisgeis.com/2016/08/29/new-site/</id>
    <published>2016-08-30T02:46:26.000Z</published>
    <updated>2020-07-12T03:10:31.034Z</updated>
    
    <content type="html"><![CDATA[<p>I moved my blog to Hexo, a static site generator. It’s easier for me toreason about what’s going on in the site now, since each post is just a file.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I moved my blog to Hexo, a static site generator. It’s easier for me to
reason about what’s going on in the site now, since each post is 
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
